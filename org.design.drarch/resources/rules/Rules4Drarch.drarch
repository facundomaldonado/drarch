<?xml version="1.0" encoding="ISO-8859-15"?>
<rules4Java.engine.ruleModel:DrarchFileModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:rules4Java.engine.ruleModel="http:///rules4Java/engine/ruleModel.ecore" fileName="rules.drarch">
  <rules suggestTemplate="Crear el componente ?c." description="Componentes Singleton">
    <query queryString="creator(?C, ?Ctor, ?L), child(?C, ?Method), modifier(?Method, static), returns(?Method, ?C), package(?C, ?P), name(?C, ?c), name(?P, ?p), child(?File, ?C), name(?File, ?f)">
      <chosenVars varText="?c"/>
      <chosenVars varText="?p"/>
      <chosenVars varText="?f"/>
    </query>
    <factSet>
      <factTemplates factText="component(?c)."/>
      <factTemplates factText="association(?c, ?p,?f)."/>
      <factTemplates factText="responsibility(?c)."/>
      <factTemplates factText="hasResponsibility(?c, ?c)."/>
      <factTemplates factText="mapping(?c, ?p, ?f)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="Crear el componente ?B." description="Componentes por tipos de jerarquia">
    <query queryString="method(?abstractMethod),child(?baseClass,?abstractMethod), modifier(?abstractMethod, abstract), overrides(?concreteMethod,?abstractMethod), child(?concreteClass,?concreteMethod), name(?baseClass, ?B), package(?baseClass, ?P), child(?File, ?baseClass), javaFile(?File), name(?File, ?F), child(?GFile, ?concreteClass), javaFile(?GFile), name(?GFile, ?G), package(?concreteClass, ?Q)">
      <chosenVars varText="?B"/>
      <chosenVars varText="?P"/>
      <chosenVars varText="?F"/>
      <chosenVars varText="?G"/>
      <chosenVars varText="?Q"/>
    </query>
    <factSet>
      <factTemplates factText="component(?B)."/>
      <factTemplates factText="association(?B, ?Q,?G)."/>
      <factTemplates factText="association(?B, ?P,?F)."/>
      <factTemplates factText="responsibility(?B)."/>
      <factTemplates factText="hasResponsibility(?B, ?B)."/>
      <factTemplates factText="mapping(?B, ?Q, ?G)."/>
      <factTemplates factText="mapping(?B, ?P, ?F)."/>
     
    </factSet>
  </rules>
  <rules suggestTemplate="Crear el componente ?C." description="Componentes hook">
    <query queryString="method(?hook),child(?baseClass,?hook),modifier(?hook, abstract),calls(?template,?hook,?L),child(?sup,?template),calls(?required,?template,?f),child(?sup1,?required), name(?sup1, ?C), NOT(component(?C)), package(?sup1, ?P), child(?File, ?sup1), javaFile(?File), name(?File, ?F)">
      <chosenVars varText="?C"/>
      <chosenVars varText="?F"/>
      <chosenVars varText="?P"/>
    </query>
    <factSet>
      <factTemplates factText="component(?C)."/>
      <factTemplates factText="association(?C, ?P,?F)."/>
      <factTemplates factText="responsibility(?C)."/>
      <factTemplates factText="hasResponsibility(?C, ?C)."/>
      <factTemplates factText="mapping(?C, ?P, ?F)."/>
    </factSet>
  </rules>
  
  <rules suggestTemplate="Crear el componente ?C." description="Componentes hook">
    <query queryString="method(?hook),child(?baseClass,?hook),modifier(?hook, abstract),calls(?template,?hook,?L),child(?sup,?template), name(?sup, ?C), NOT(component(?C)), package(?sup, ?P), child(?File, ?sup), javaFile(?File), name(?File, ?F)">
      <chosenVars varText="?C"/>
      <chosenVars varText="?F"/>
      <chosenVars varText="?P"/>
    </query>
    <factSet>
      <factTemplates factText="component(?C)."/>
      <factTemplates factText="association(?C, ?P,?F)."/>
      <factTemplates factText="responsibility(?C)."/>
      <factTemplates factText="hasResponsibility(?C, ?C)."/>
      <factTemplates factText="mapping(?C, ?P, ?F)."/>
    </factSet>
  </rules>
  
  <rules suggestTemplate="Crear la relacion entre ?E (Provided) y ?J (Required)." description="Relaciones hook">
    <query queryString="method(?hook),child(?baseClass,?hook),modifier(?hook, abstract),calls(?template,?hook,?L),child(?sup,?template), calls(?required,?template,?f),child(?sup1,?required), package(?sup, ?P), child(?File, ?sup), javaFile(?File), name(?File, ?F),       package(?sup1, ?Package1), child(?File1, ?sup1), javaFile(?File1), name(?File1, ?FileName1), name(?Package1, ?PackageName1), association(?J, ?PackageName1, ?FileName1), name(?P, ?PName), association(?E, ?PName, ?F), NOT(equals(?E, ?J))">
      <chosenVars varText="?E"/>
      <chosenVars varText="?J"/>
    </query>
    <factSet>
      <factTemplates factText="port(port_?E)."/>
      <factTemplates factText="port(port_?J)."/>
      <factTemplates factText="hasPort(?J, port_?J)."/>
      <factTemplates factText="hasPort(?E, port_?E)."/>
      <factTemplates factText="interfaceModel(interfaceP_?E)."/>
      <factTemplates factText="interfaceModel(interfaceR_?J)."/>
      <factTemplates factText="hasProvidedInterface(port_?E, interfaceP_?E)."/>
      <factTemplates factText="hasRequiredInterface(port_?J, interfaceR_?J)."/>
      <factTemplates factText="interfaceLink(interfaceP_?E, interfaceR_?J)."/>
    </factSet>
  </rules>
  
  <rules suggestTemplate="El componente ?H crea objetos pertenecientes al componente ?I" description="Relacion de creacion">
    <query queryString="creator(?C, ?E, ?L), child(?D, ?E), child(?F, ?D), javaFile(?F), name(?F, ?X), child(?M, ?C), javaFile(?M) ,name(?M, ?Y), association(?H, ?P1, ?X), association(?I, ?P2, ?Y), NOT(equals(?H, ?I))">
      <chosenVars varText="?H"/>
      <chosenVars varText="?I"/>
    </query>
    <factSet>
      <factTemplates factText="relationship(?H, ?I, creator)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="Crear una relacion entre el componente ?C y el ?D" description="Relacion por argumentos">
    <query queryString="method(?Method), arg(?Method, ?Arg), child(?cu1, ?Arg), child(?Class, ?Method), child(?cu2, ?Class), javaFile(?cu2), javaFile(?cu1), name(?cu1, ?cu1Name), name(?cu2, ?cu2Name), association(?D, ?Package1, ?cu1Name), association(?C, ?Package2, ?cu2Name), NOT(equals(?C, ?D)) ">
      <chosenVars varText="?C"/>
      <chosenVars varText="?D"/>
    </query>
    <factSet>
      <factTemplates factText="port(port_?D)."/>
      <factTemplates factText="port(port_?C)."/>
      <factTemplates factText="hasPort(?C, port_?C)."/>
      <factTemplates factText="hasPort(?D, port_?D)."/>
      <factTemplates factText="interfaceModel(interfaceP_?D)."/>
      <factTemplates factText="interfaceModel(interfaceR_?C)."/>
      <factTemplates factText="hasProvidedInterface(port_?D, interfaceP_?D)."/>
      <factTemplates factText="hasRequiredInterface(port_?C, interfaceR_?C)."/>
      <factTemplates factText="interfaceLink(interfaceP_?D, interfaceR_?C)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="El componente ?C contiene variables cuyos tipos pertenecen al componente ?D" description="Relacion por fields">
    <query queryString="field(?Field), type(?Field, ?RefType1), (class(?RefType1); interface(?RefType1)), child(?RefType2, ?Field), (class(?RefType2); interface(?RefType2)), child(?CU1, ?RefType1), javaFile(?CU1), child(?CU2, ?RefType2), javaFile(?CU2), name(?CU1, ?CU1Name), name(?CU2, ?CU2Name), association(?D, ?Package1, ?CU1Name), association(?C, ?Package2, ?CU2Name), NOT(equals(?C, ?D)) ">
      <chosenVars varText="?C"/>
      <chosenVars varText="?D"/>
    </query>
    <factSet>
      <factTemplates factText="port(port_?D)."/>
      <factTemplates factText="port(port_?C)."/>
      <factTemplates factText="hasPort(?C, port_?C)."/>
      <factTemplates factText="hasPort(?D, port_?D)."/>
      <factTemplates factText="interfaceModel(interfaceP_?D)."/>
      <factTemplates factText="interfaceModel(interfaceR_?C)."/>
      <factTemplates factText="hasProvidedInterface(port_?D, interfaceP_?D)."/>
      <factTemplates factText="hasRequiredInterface(port_?C, interfaceR_?C)."/>
      <factTemplates factText="interfaceLink(interfaceP_?D, interfaceR_?C)."/>
    </factSet>
  </rules>
</rules4Java.engine.ruleModel:DrarchFileModel>
