<?xml version="1.0" encoding="ISO-8859-15"?>
<rules4Java.engine.ruleModel:DrarchFileModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:rules4Java.engine.ruleModel="http:///rules4Java/engine/ruleModel.ecore" fileName="rules.drarch">
  <rules suggestTemplate="Crear el componente ?P" description="Un componente por paquete">
    <query queryString="package(?P)">
      <chosenVars varText="?P"/>
    </query>
    <factSet>
      <factTemplates factText="component(?P)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="El componente ?P se materializa en la cu ?X" description="Materialización de componentes con CU">
    <query queryString="package(?P),name(?P, ?PackageName), component(?PackageName), child(?P,?File), javaFile(?File), name(?File, ?X)">
      <chosenVars varText="?P"/>
      <chosenVars varText="?X"/>
    </query>
    <factSet>
      <factTemplates factText="association(?P, ?P,?X)."/>
      <factTemplates factText="responsibility(?P)."/>
      <factTemplates factText="hasResponsibility(?P, ?P)."/>
      <factTemplates factText="mapping(?P, ?P, ?X)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="Crear el componente ?C." description= "Componentes Singleton">
    <query queryString="creator(?C, ?Ctor, ?L), child(?C, ?Method), modifier(?Method, static), returns(?Method, ?C), package(?C, ?P)">
      <chosenVars varText="?C"/>
      <chosenVars varText="?P"/>
    </query>
    <factSet>
      <factTemplates factText="component(?C)."/>
      <factTemplates factText="association(?C, ?P,?C)."/>
      <factTemplates factText="responsibility(?C)."/>
      <factTemplates factText="hasResponsibility(?C, ?C)."/>
      <factTemplates factText="mapping(?C, ?P, ?C)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="Crear el componente ?z." description= "Componentes según implementaciones de de intarfeces ó clases abstractas">
    <query queryString="method(?Method),child(?RefType,?Method),(interface(?RefType);modifier(?Method, abstract)), overrides(?m,?Method), child(?c,?m), arg(?n,?RefType), child(?C,?n),type(?C),subtype+(?C,?t),package(?P), component(?N), name(?P, ?N), package(?t,?P),package(?c,?e), child(?File, ?c), javaFile(?File), name(?File, ?z)">
      <chosenVars varText="?z"/>
      <chosenVars varText="?P"/>
    </query>
    <factSet>
      <factTemplates factText="component(?z)."/>
      <factTemplates factText="association(?z, ?P,?z)."/>
      <factTemplates factText="responsibility(?z)."/>
      <factTemplates factText="hasResponsibility(?z, ?z)."/>
      <factTemplates factText="mapping(?z, ?P, ?z)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="El componente ?H crea objetos pertenecientes al componente ?I" description="Relacion de creación">
    <query queryString="creator(?C, ?E, ?L), child(?D, ?E), child(?F, ?D), javaFile(?F), name(?F, ?X), child(?M, ?C), javaFile(?M) ,name(?M, ?Y), association(?H, ?P1, ?X), association(?I, ?P2, ?Y)">
      <chosenVars varText="?H"/>
      <chosenVars varText="?I"/>
    </query>
    <factSet>
      <factTemplates factText="relationship(?H, ?I, creator)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="El componente ?K usa como argumento de sus metodos al componente ?J">
    <query queryString="method(?M),child(?T,?M),(interface(?T);modifier(?M,abstract)),overrides(?m,?M),child(?c,?m),arg(?n,?T),child(?C,?n),type(?C),subtype+(?C,?t),package(?P), component(?N), name(?P, ?N), package(?t,?P),package(?c,?P), child(?r, ?c), javaFile(?r), name(?r, ?z), child(?Q, ?t), javaFile(?Q), name(?Q, ?q), NOT( likeThis(?r, ?Q)), association(?J, ?P1, ?z), association(?K, ?P2, ?q)">
      <chosenVars varText="?J"/>
      <chosenVars varText="?K"/>
    </query>
    <factSet>
      <factTemplates factText="port(port_?J)."/>
      <factTemplates factText="port(port_?K)."/>
      <factTemplates factText="hasPort(?J, port_?J)."/>
      <factTemplates factText="hasPort(?K, port_?K)."/>
      <factTemplates factText="interfaceModel(interfaceP_?K)."/>
      <factTemplates factText="interfaceModel(interfaceR_?J)."/>
      <factTemplates factText="hasProvidedInterface(port_?K, interfaceP_?K)."/>
      <factTemplates factText="hasRequiredInterface(port_?J, interfaceR_?J)."/>
      <factTemplates factText="interfaceLink(interfaceP_?K, interfaceR_?J)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="El componente ?q tiene como atributo al componente ?w.">
    <query queryString="method(?M),child(?T,?M),(interface(?T);modifier(?M,abstract)),overrides(?m,?M),child(?t,?m),field(?f),type(?f,?T),child(?C,?f),type(?C),subtype+(?C,?c),package(?P), component(?N), name(?P, ?N),package(?t,?P),package(?c,?P), child(?r, ?c), javaFile(?r), name(?r, ?w), child(?Q, ?t), javaFile(?Q), name(?Q, ?q)">
      <chosenVars varText="?q"/>
      <chosenVars varText="?w"/>
    </query>
    <factSet>
      <factTemplates factText="association(?q, ?q,?q)."/>
      <factTemplates factText="responsibility(?q)."/>
      <factTemplates factText="hasResponsibility(?q, ?q)."/>
      <factTemplates factText="mapping(?q, ?q, ?q)."/>
      <factTemplates factText="association(?w, ?w,?w)."/>
      <factTemplates factText="responsibility(?w)."/>
      <factTemplates factText="hasResponsibility(?w, ?w)."/>
      <factTemplates factText="mapping(?w, ?w, ?w)."/>
      <factTemplates factText="port(port_?q)."/>
      <factTemplates factText="port(port_?w)."/>
      <factTemplates factText="hasPort(?w, port_?w)."/>
      <factTemplates factText="hasPort(?q, port_?q)."/>
      <factTemplates factText="interfaceModel(interfaceP_?q)."/>
      <factTemplates factText="interfaceModel(interfaceR_?w)."/>
      <factTemplates factText="hasProvidedInterface(port_?q, interfaceP_?q)."/>
      <factTemplates factText="hasRequiredInterface(port_?w, interfaceR_?w)."/>
      <factTemplates factText="interfaceLink(interfaceP_?q, interfaceR_?w)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="Crear una relación entre el componente ?C y el ?D" description="Relación por argumentos">
    <query queryString="method(?Method), arg(?Method, ?Arg), child(?cu1, ?Arg), child(?Class, ?Method), child(?cu2, ?Class), name(?cu1, ?cu1Name), name(?cu2, ?cu2Name), association(?C, ?Package1, ?cu1Name), association(?D, ?Package2, ?cu2Name), NOT(equals(?C, ?D)) ">
      <chosenVars varText="?C"/>
      <chosenVars varText="?D"/>
    </query>
    <factSet>
      <factTemplates factText="port(port_?D)."/>
      <factTemplates factText="port(port_?C)."/>
      <factTemplates factText="hasPort(?C, port_?C)."/>
      <factTemplates factText="hasPort(?D, port_?D)."/>
      <factTemplates factText="interfaceModel(interfaceP_?D)."/>
      <factTemplates factText="interfaceModel(interfaceR_?C)."/>
      <factTemplates factText="hasProvidedInterface(port_?D, interfaceP_?D)."/>
      <factTemplates factText="hasRequiredInterface(port_?C, interfaceR_?C)."/>
      <factTemplates factText="interfaceLink(interfaceP_?D, interfaceR_?C)."/>
    </factSet>
  </rules>
  <rules suggestTemplate="El componente ?C contiene variables cuyos tipos pertenecen al componente ?D" description="Relación por fields">
    <query queryString="field(?Field), type(?Field, ?RefType1), (class(?RefType1); interface(?RefType1)), child(?RefType2, ?Field), (class(?RefType2); interface(?RefType2)), child(?CU1, ?RefType1), cu(?CU1), child(?CU2, ?RefType2), cu(?CU2), name(?CU1, ?CU1Name), name(?CU2, ?CU2Name), association(?C, ?Package1, ?CU1Name), association(?D, ?Package2, ?CU2Name), NOT(equals(?C, ?D)) ">
      <chosenVars varText="?C"/>
      <chosenVars varText="?D"/>
    </query>
    <factSet>
      <factTemplates factText="port(port_?D)."/>
      <factTemplates factText="port(port_?C)."/>
      <factTemplates factText="hasPort(?C, port_?C)."/>
      <factTemplates factText="hasPort(?D, port_?D)."/>
      <factTemplates factText="interfaceModel(interfaceP_?D)."/>
      <factTemplates factText="interfaceModel(interfaceR_?C)."/>
      <factTemplates factText="hasProvidedInterface(port_?D, interfaceP_?D)."/>
      <factTemplates factText="hasRequiredInterface(port_?C, interfaceR_?C)."/>
      <factTemplates factText="interfaceLink(interfaceP_?D, interfaceR_?C)."/>
    </factSet>
  </rules>
</rules4Java.engine.ruleModel:DrarchFileModel>
