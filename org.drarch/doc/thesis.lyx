#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1.7in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Include \include{cover.lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter*
Resumen
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
addcontentsline{toc}{chapter}{Resumen}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las arquitecturas de software son modelos de sistemas que, al poseer un
 alto nivel de abs\SpecialChar \-
trac\SpecialChar \-
ción, permiten manejar correctamente la distancia
 entre re\SpecialChar \-
que\SpecialChar \-
ri\SpecialChar \-
mien\SpecialChar \-
tos e implementación.
 La adopción cada vez mayor del desarrollo centrado en la arquitectura se
 debe a que ésta expone las principales decisiones de diseño y sus consecuencias
 en una etapa temprana del desarrollo de software, y al hacerlo permite
 un mejor entendimiento tanto del sistema como de sus requerimientos por
 parte de todas las personas involucradas.
 Por estas razones, un buen diseño arquitectónico tiene un impacto positivo
 en la calidad final de los productos.
\end_layout

\begin_layout Standard
Todo sistema que tiene software tiene una arquitectura de software.
 Sin embargo, no necesariamente existe en la práctica una documentación
 acertada de esta arquitectura.
 Quizás toda la gente que diseñó el sistema se ha ido, la documentación
 es escaza o nunca se produjo, el código fuente se ha perdido o nunca se
 entregó, y lo único con que se cuenta es con el código ejecutable binario.
 No obstante, una arquitectura puede existir independientemente de su especifica
ción, lo que demuestra la importancia de la documentación.
 Por lo tanto, el hecho de lidiar con sistemas que no poseen documentación
 es un escenario que ocurre con frecuencia dentro de las organizaciones.
 Sistemas legados suelen no poseer documentación alguna y es muy común que
 nuevos sistemas de software tengan que integrarse con estos.
\end_layout

\begin_layout Standard
Actualmente, el problema ha sido tratado por medio de algunos enfoques basados
 en ingeniería reversa, con resultados dispares.
 La falta de una herramienta de soporte más adecuada para realizar la reconstruc
ción de las arquitecturas sigue siendo un problema para muchos proyectos
 de software.
 La Reconstrucción de Arquitecturas de Software es una técnica para generar
 representaciones arquitectónicas de un sistema que puede ser utilizada
 de diversas formas.
 El principal uso de esta representación es el de documentar la arquitectura
 existente de un sistema.
\end_layout

\begin_layout Standard
En este trabajo, proponemos un enfoque materializado en una herramienta
 de soporte llamada 
\emph on
DRArch
\emph default
, para asistir a los desarrolladores a generar la documentación arquitectónica
 utilizando un proceso de reconstrucción de arquitecturas.
 En particular, se asume que existe el código fuente del sistema.
 El objetivo principal de 
\emph on
DRArch
\emph default
 es realizar un análisis de toda la información relevante que se pueda recolecta
r de un sistema, generando como salida una representación arquitectónica
 por medio de diagramas de 
\emph on
Use-Case Maps
\emph default
 (UCMs), una notación práctica para especificar tanto componentes como flujos
 de responsabilidades.
\end_layout

\begin_layout Standard
Para lograr la funcionalidad propuesta, 
\emph on
DRArch 
\emph default
sigue un proceso iterativo en el cuál el arquitecto interactúa en pequeñas
 decisiones para ir especificando incrementalmente el modelo arquitectónico
 del sistema.
 Dicho modelo esta representado por una base de datos de conocimiento lo
 suficientemente flexible como para poder realizar consultas complejas de
 forma simple.
\end_layout

\begin_layout Chapter*
Agradecimientos
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
addcontentsline{toc}{chapter}{Agradecimientos}
\end_layout

\end_inset

...¡Gracias!
\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introducción
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX - Se nota que estos párrafos fueron traducidos del ingles 
\end_layout

\end_inset

La Arquitectura de Software sirve para capturar las principales decisiones
 de diseño del sistema.
 Es muy difícil que estas primeras decisiones puedan cambiarse más adelante,
 por ejemplo, durante el proceso de desarrollo.
 Los efectos que tienen estas decisiones son los que más perduran en el
 ciclo de vida de un sistema.
 En particular, una arquitectura abarca aspectos estructurales y de comportamien
to: los aspectos estructurales se refieren a vistas estáticas del sistema,
 mientras que los aspectos de comportamiento se refieren a vistas dinámicas
 del sistema.
 Por ejemplo, los diagramas de componentes sirven para representar aspectos
 estructurales, mientras que los 
\emph on
Use Case Maps
\emph default
 
\begin_inset LatexCommand cite
key "UCMBOOK"

\end_inset

 proveen un modelo para aspectos de comportamiento.
 Así y todo, aún con la ayuda de las arquitecturas, entender cómo funciona
 un sistema complejo y comunicárselo a los demás continua siendo un problema
 para muchas organizaciones.
 
\end_layout

\begin_layout Standard
Todo sistema que involucra software posee una arquitectura de software.
 Sin embargo, no necesariamente existe en la práctica una documentación
 acertada de esta arquitectura.
 Es muy común que la gente que diseñó el sistema se haya ido de la organización,
 que la documentación sea escasa y esté des\SpecialChar \-
actua\SpecialChar \-
li\SpecialChar \-
za\SpecialChar \-
da, que el código fuente
 se haya perdido, y lo único con lo que se cuenta es con el código ejecutable
 binario.
 En estas situaciones, dado que una arquitectura puede existir independientement
e de su especificación, es que cobran importancia las enfoques de documentación
 y reconstrucción de arquitecturas 
\begin_inset LatexCommand cite
key "SAIP"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Motivación"

\end_inset

Motivación
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Entra muy rapido esto concepto.
 Se podria poner algo como: (1- Si bien es comunmente aceptado que arquitectura
 de software puede ser utilizada como vehiculo comunicación entre personas
 con diferentes necesidades de un sistema, se puede ver la falta de documentació
n arquitectónica en la mayoria de los proyectos de desarrollos actuales[Reffs],
 especialmente en empresas de software pequeñas.) (2-Debido a la importancia
 de la arquitectura de software en la toma de desición en diferentes etapas
 del proceso de desarrollo, es necesario contar con documentación actualizada
 que refleje arquitectónicamente relaciones en la implementación del sistema.
 Esta documentación puede ser extraida a partir de información provista
 por las sentencias del código fuente[ref1,ref2,etc].Sin embargo, el código
 fuente provee una vista parcial de los aspectos arquitectónicos que no
 incluye la dinámica de los diversos componentes de software.
 Evidencia de la dinámica del sistema puede ser obtenida del analisis de
 la ejecución de las sentencias y los valores correspondientes en tiempo
 de ejecución....
 ) 
\end_layout

\begin_layout Standard
(cada uno de los parrafos habria que extenderlos usando el párrafo que les
 escribi como sentencia principal.)
\end_layout

\end_inset

Si bien es comunmente aceptado que arquitectura de software puede ser utilizada
 como vehículo de comunicación entre personas con diferentes necesidades
 de un sistema, se puede ver la falta de documentación arquitectónica en
 la mayoría de los proyectos de desarrollos actuales, especialmente en empresas
 de software pequeñas.
 Esta es una de las situaciones donde surge la necesidad de reconstruir
 la arquitectura de un sistema.
 La Reconstrucción de Arquitecturas es una técnica para generar representaciones
 arquitectónicas del sistema que puede ser utilizada de diversas formas.
 El principal uso de esta representación es el de documentar la arquitectura
 existente de un sistema.
 Si no existe la documentación o la documentación disponible esta desactualizada
, la representación obtenida mediante la reconstrucción puede ser usada
 como una base para la re-documentación de la arquitectura.
 Esta representación también puede ser usada como un punto de comienzo para
 realizar re-ingeniería sobre el sistema y crear una nueva arquitectura.
 Finalmente, la re\SpecialChar \-
pre\SpecialChar \-
sen\SpecialChar \-
ta\SpecialChar \-
ción puede ser usada como una forma de identificar
 componentes reusables o para establecer una arquitectura base dentro de
 una línea de productos de software 
\begin_inset LatexCommand cite
key "Rick2003"

\end_inset

.
\end_layout

\begin_layout Standard
Debido a la importancia de la arquitectura de software en la toma de decisión
 en diferentes etapas del proceso de desarrollo, es necesario contar con
 documentación actualizada que refleje arquitectónicamente relaciones en
 la implementación del sistema.
 Esta documentación puede ser extraída a partir de información provista
 por las sentencias del código fuente.
 Sin embargo, el código fuente provee una vista parcial de los aspectos
 arquitectónicos que no incluye la dinámica de los diversos componentes
 de software.
 Evidencia de la dinámica del sistema puede ser obtenida del análisis de
 la ejecución de las sentencias y los valores correspondientes en tiempo
 de ejecución.
\end_layout

\begin_layout Standard
Algunas soluciones a la Reconstrucción de Arquitecturas han sido propuestas
 en 
\begin_inset LatexCommand cite
key "BOWMAN99,GALL95,TZERPOS96,Harris1995,Rick2003,GUO99"

\end_inset

.
 En la mayoría, la arquitectura del sistema se extrae principalmente por
 medio del análisis del código fuente.
 En otras, la información se obtiene tanto del código fuente como del sistema
 en ejecución o sólo re\SpecialChar \-
cons\SpecialChar \-
tru\SpecialChar \-
ye arquitecturas de sistemas implementados
 utilizando patrones de diseño.
 Muchos de los enfoques mencionados sólo muestran aspectos estructurales
 (diagramas de clases) y muy pocos muestran resultados que permitan visualizar
 el comportamiento del sistema (ej: diagramas de UCMs o de secuencia).
 
\end_layout

\begin_layout Standard
Estos enfoques presentan el resultado de la reconstrucción en un solo paso
 y el arquitecto no ve el progreso del proceso de reconstrucción.
 Esto hace que el proceso no se pueda 
\begin_inset Quotes eld
\end_inset

guiar
\begin_inset Quotes erd
\end_inset

 a medida que se reconstruye la arquitectura.
 Es decir, no se tiene control sobre qué y cómo se recupera la información,
 ni se puede intervenir si lo considera necesario.
 Además, no es posible manipular la información de forma interactiva, perdiendo
 así la posibilidad de contar con la experiencia del arquitecto y su conocimient
o en el dominio.
 Por otro lado, ninguno de estos enfoques mantiene la información recuperada
 de tal forma que sea flexible su manipulación
\end_layout

\begin_layout Section
Objetivos y restricciones
\end_layout

\begin_layout Standard
Como objetivo principal del trabajo se propuso reconstruir la arquitectura
 de un sistema de software.
 Para cumplir con este objetivo, el proceso de reconstrucción genera diagramas
 (vistas arquitectónicas) que representan aspectos estructurales y comportamenta
les del sistema.
\end_layout

\begin_layout Standard
Por otro lado, el análisis de algunos trabajos similares puso a la luz ciertas
 ca\SpecialChar \-
rac\SpecialChar \-
te\SpecialChar \-
rís\SpecialChar \-
ti\SpecialChar \-
cas que pueden dificultar la aplicación de un enfoque de esta
 naturaleza.
 Por esta razón se impusieron las siguientes restricciones:
\end_layout

\begin_layout Itemize
Se debe tener en cuenta en el análisis la información que aporten las personas
 que poseen conocimiento del sistema del cual se quiere obtener una representaci
ón arquitectónica.
 Así como también aquella información que este basada en la experiencia.
\end_layout

\begin_layout Section
Organización del trabajo
\end_layout

\begin_layout Standard
El resto de este trabajo se encuentra organizado de la siguiente manera.
 En el capítulo\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:Contexto"

\end_inset

 se presentan los conceptos de Arquitecturas de Software, Descripciones
 de Arquitecturas, Use Case Maps y la necesidad de la documentación Arquitectóni
ca, que son las nociones principales en las que está basado nuestro enfoque.
 Una vez introducido el contexto, en el capítulo\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:Trabajos-relacionados"

\end_inset

 se analizan y comparan algunos trabajos relacionados que, de diferentes
 maneras, apuntan a solucionar el problema de falta o inexistencia de documentac
ión arquitectónica a través de la reconstrucción arquitectónica.
 Luego de este análisis, en el capítulo\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:El-enfoque-DRArch"

\end_inset

 se explica el enfoque 
\emph on
DRArch
\emph default
, detallando cada uno de los pasos que propone para la reconstrucción de
 arquitecturas.
 Dado que el enfoque requirió la construcción de una herramienta de soporte,
 en el capítulo\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:Implementación"

\end_inset

 se presentan su diseño y los aspectos más importantes de su implementación.
 A modo de casos de estudio, se ejercitó la herramienta implementada con
 el sistema G2 – una aplicación comercial desarrollada en un proyecto de
 transferencia con la empresa Delsat, S.A.
 – y de 
\emph on
FLABot
\emph default
 – una herramienta realizada dentro de un proyecto de investigación.
 Más adelante, en el capítulo\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:Casos-de-Estudio"

\end_inset

, se presentan los resultados de estos casos de estudio.
 Finalmente, en el capítulo\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:Conclusiones-y-Trabajos"

\end_inset

 se presentan las conclusiones del trabajo, junto con algunas propuestas
 para posibles trabajos futuros.
\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:Contexto"

\end_inset

Contexto
\end_layout

\begin_layout Standard
En este capítulo se ofrecerá una introducción a los conceptos centrales
 sobre los que se ha realizado este trabajo.
 En primer lugar se define la noción de 
\emph on
Arquitectura de Software
\emph default
 en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Arquitectura-de-Software"

\end_inset

, enfatizando la importancia de su documentación dentro de la organización
 y en particular para el equipo de desarrollo.
 También se realiza un análisis de por qué se elijen los UCMs para representar
 arquitecturas.
 
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Falta un análisis de por qué es UCMs.
\end_layout

\end_inset

 En la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Use-Case-Maps"

\end_inset

 se presentan los 
\emph on
Use-Case Maps
\emph default
, una notación simple y efectiva para la documentación de comportamiento
 a nivel arquitectónico.
 Luego, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Necesidad-de-Documentación-Arquitectónica"

\end_inset

 se introduce un problema relacionado con la falta de documentación arquitectóni
ca, explicando las condiciones donde ocurre y las graves consecuencias que
 presenta para el desarrollo de software.
 Por último, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Conclusión"

\end_inset

 y a modo de resumen, se resaltan los conceptos clave detallados en este
 capítulo.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Arquitectura-de-Software"

\end_inset

Arquitecturas de software
\end_layout

\begin_layout Standard
Si bien no existe una única definición de arquitectura de software universalment
e aceptada, generalmente todas lo hacen en función de conceptos comunes.
 En todas se encuentra la noción de descomposición de un sistema en diferentes
 partes, de relaciones existentes entre estas partes, de abstracción de
 las propiedades que no sean externamente visibles ni relevantes para la
 interacción de sus elementos.
 Adicionalmente, se sabe que existen diferentes perspectivas desde las que
 se puede observar un sistema según las propiedades de interés y que ninguna
 de estas vistas conforma la arquitectura en si.
 En su libro 
\emph on
Software Architecture in Practice
\emph default
\InsetSpace ~

\emph on

\begin_inset LatexCommand cite
key "SAIP"

\end_inset


\emph default
, Bass et.al.
 proponen una definición que abarca gran parte de las características antes
 mencionadas:
\end_layout

\begin_layout Quote

\emph on
La arquitectura de software de un programa o sistema de computación es la
 estructura o estructuras del sistema, las cuales abarcan los elementos
 de software, las propiedades externamente visibles de esos elementos, y
 las relaciones entre ellos.
\end_layout

\begin_layout Standard
Como se desprende de esta definición, una arquitectura de software puede
 abarcar
\emph on
 
\emph default
más de una estructura o vista.
 Un ejemplo que puede ilustrar esta propiedad es observar la estructura
 que presentan normalmente los proyectos de desarrollo.
 Generalmente éstos son particionados en módulos con una cierta cantidad
 de responsabilidades fundamentales, que luego son asignadas a diferentes
 equipos para su de\SpecialChar \-
sa\SpecialChar \-
rro\SpecialChar \-
llo.
 Cada uno de estos módulos contiene programas y datos accesibles desde otros
 elementos, además de otros atributos que son privados.
 Éste tipo de estructura se emplea a menudo para describir un sistema y
 define principalmente cómo se divide y asigna su funcionalidad, por esta
 razón, representa una perspectiva estática.
 Por otro lado, existen estructuras que centran su atención en cómo los
 elementos interactúan en tiempo de ejecución para alcanzar la funcionalidad
 propuesta.
 Aquí el foco se pone sobre la manera en que los diferentes módulos interactúan
 para ejecutarse en diferentes procesos y como se comunican y sincronizan
 entre ellos.
 A pesar de que ambas vistas aportan información sobre la arquitectura,
 ninguna de ellas la describe en su totalidad.
 
\end_layout

\begin_layout Standard
La definición precedente también caracteriza a las vistas del sistema por
 estar compuestas de elementos de software, de propiedades externamente
 visibles y de relaciones entre ellos.
 Esto implica que no es relevante en este nivel, y por lo tanto se omite,
 la información de los elementos que no es pertinente a su interacción.
 Justamente por ser una abstracción de un sistema complejo, la arquitectura
 de software oculta los detalles que no afectan la manera en que los diferentes
 elementos usan, son usados por, se relacionan con o interactúan con otros
 elementos.
\end_layout

\begin_layout Standard
Una de las implicancias de la definición de arquitectura, es su omnipresencia
 en cualquier sistema de software, aunque ésta no se encuentre documentada.
 Cualquier sistema posee elementos distinguibles con propiedades y relaciones
 asociadas, sin embargo no siempre existe alguien que conozca esta arquitectura,
 de aquí que resulte muy importante su documentación.
\end_layout

\begin_layout Standard
Finalmente, de la definición se deduce que el comportamiento de los elementos
 de software también forma parte de la arquitectura.
 Tal como ocurre con las propiedades internas de los elementos de software,
 
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Les falta releer el doc.
 para detectar malfomación en los parrafos como aca...
\end_layout

\end_inset

 en donde el comportamiento relevante en este nivel es aquel que afecte
 a la forma en cómo los demás elementos tienen que ser escritos y de qué
 manera deben comunicarse con él.
\end_layout

\begin_layout Standard
A continuación, se presentan los estilos arquitectónicos que nos ayudan
 a describir los distintos tipos de componentes y su tipología.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-debe haber un parrafo que introduzca la sección siguiente...
 
\end_layout

\end_inset


\end_layout

\begin_layout Description
Estilos\InsetSpace ~
Arquitectónicos
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Poner mas info en esta seccion!!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-El título de modelos arquitectónicos y despeus hablan de estilos :|
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los estilos arquitectónicos son descripciones de los distintos tipos de
 componentes y su tipología.
 También incluye una descripción del patrón de datos y la interacción de
 control.
 Los estilos arquitectónicos son artefactos de ingeniería muy importantes
 porque definen soluciones de diseños que pueden ser aplicados a problemas
 recurrentes.
 Éstos ofrecen modelos que se basan en la experiencia y en cómo fueron utilizado
s anteriormente.
 
\end_layout

\begin_layout Standard
Garlan and Shaw [1993], Garlan et al.
 [1994], y Shaw and Clements [1997] proponen la siguiente definición de
 estilos arquitectónicos en términos de patrones de interacciones entre
 tipos de componentes:
\end_layout

\begin_layout Quote

\emph on
Un estilo arquitectónico determina el vocabulario de componentes y conectores
 que pueden ser usados en instancias de ese estilo, junto con un conjunto
 de restricciones de cómo pueden ser combinadas.
 De esta forma, se definen familias de estilos que comparten propiedades
 arquitectónicas comunes.
\end_layout

\begin_layout Standard
Los estilos también pueden incluir una descripción formal en donde se detalla
 la relación costo-beneficio de aplicar el estilo.
 Por ejemplo, una descripción podría ser: "Utilizar el estilo arquitectónico
 
\emph on
Pipes and Filters
\emph default
 cuando se requiera el reuso de los componentes mientras que la 
\emph on
performance
\emph default
 no es de alta prioridad.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
A software architecture determines how system components are identified
 and allocated, how the components interact to form a system, the amount
 and granularity of communication needed for interaction, and the interface
 protocols used for communication.
 For a network-based application, system performance is dominated by network
 communication.
 Therefore, selection of the appropriate architectural style(s) for use
 in designing the software architecture can make the difference between
 success and failure in the deployment of a network-based application.
 Software architectural styles have been characterized by their control-flow
 and dataflow patterns, allocation of functionality across components, and
 component types.
 Unfortunately, none of these characterizations are useful for understanding
 how a style influences the set of architectural properties, or qualities,
 of a system.
 These properties include, among others, user-perceived performance, network
 efficiency, simplicity, modifiability, scalability, and portability.
 We use these style-induced architectural properties to classify styles
 for network-based applications with the goal of understanding why certain
 styles are better than others for some applications, thus providing additional
 guidance for software engineers faced with the task of architectural design.
\end_layout

\begin_layout Standard
Architectural Styles Since an architecture embodies both functional and
 non-functional properties, it can be difficult to directly compare architecture
s for different types of systems, or for even the same type of system set
 in different environments.
 Styles are a mechanism for categorizing architectures and for defining
 their common characteristics [Di Nitto and Rosenblum, 1999].
 An architectural style characterizes a family of systems that are related
 by shared structural and semantic properties [Monroe et al., 1997].
 Architectural styles provide an abstraction for the interactions of the
 components in an architecture [Shaw, 1990].
 Each style captures the essence of a pattern of interaction by ignoring
 the incidental details of the rest of the architecture.
 Perry and Wolf [1992] define architectural style as an abstraction of element
 types and formal aspects from various specific architectures, perhaps concentra
ting on only certain aspects of an architecture.
 An architectural style encapsulates important decisions about the architectural
 elements and emphasizes important constraints on the elements and their
 relationships.
 This definition allows for styles that focus only on the connectors of
 an architecture, or on specific aspects of the component interfaces.
 In contrast, Garlan and Shaw [1993], Garlan et al.
 [1994], and Shaw and Clements [1997] all define style in terms of a pattern
 of interactions among typed components.
 Specifically, an architectural style determines the vocabulary of components
 and connectors that can be used in instances of that style, together with
 a set of constraints on how they can be combined [Garlan and Shaw, 1993].
 This restricted view of architectural styles is a direct result of their
 definition of software architecture — thinking of architecture as a formal
 description, rather than as a running system, leads to abstractions based
 only in the shared patterns of box and line diagrams.
 Abowd et al.
 [1995] define this explicitly as viewing the collection of conventions
 that are used to interpret a class of architectural descriptions as defining
 an architectural style.
 New architectures can be defined as instances of specific styles [Di Nitto
 and Rosenblum, 1999].
 Since architectural styles may address different aspects of software architectu
re, a given architecture may be composed of multiple styles.
 Likewise, a hybrid style can be formed by combining multiple basic styles
 into a single coherent style.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
An Architecture Style is a family of software architectures that share common
 architecture properties
\end_layout

\begin_layout Standard
[2] D.
 Garlan, R.
 Allen, J.
 Ockerbloom, "Exploiting Style in Architectural Design Environments", Proceeding
s of SIGSOFT ’94 Symposium on the Foundations of Software Engineering, December
 1994.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
A specialization of element and relation types, together with a set of constrain
ts on how they can be used.
 See architectural pattern.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
An architectural style is a description of component types and their topology.
 It also includes a description of the pattern of data and control interaction
 among the components and an informal description of the benefits and drawbacks
 of using that style.
 Architectural styles are important engineering artifacts because they define
 classes of designs along with their associated known properties.
 They offer experience-based evidence of how each class has been used historical
ly, along with qualitative reasoning to explain why each class has its specific
 properties.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Descriptiones_Arquitectónicas"

\end_inset

Descripciones arquitectónicas
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-hay un desbalance en la cantidad de información en las secciones.
 Si no tienen mucho que decir en secciones unifiquen todo ya que una seccion
 los obliga a poner algo dentro que merezca estar separado.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La documentación de una arquitectura es una etapa crucial para el desarrollo
 de software.
 Incluso con una arquitectura excelente, si ésta no es bien entendida y
 bien comunicada --en otras palabras, bien documentada-- es muy probable
 que el proyecto falle
\begin_inset LatexCommand cite
key "CLEMENTS02"

\end_inset

.
 Si uno se toma el trabajo de crear una arquitectura robusta, 
\emph on
debe
\emph default
 describirla con suficiente detalle, sin ambigüedad y organizada de manera
 tal que los demás puedan encontrar la información que necesitan.
 Si no se logra esto, todo el esfuerzo habrá sido en vano ya que la arquitectura
 no podrá ser usada.
\end_layout

\begin_layout Standard
La documentación de la arquitectura es tanto prescriptiva como descriptiva
 
\begin_inset LatexCommand cite
key "SAIP"

\end_inset

.
 Ésto es, para desarrolladores con determinados roles, ella impone restricciones
 que deben cumplirse al momento de tomar decisiones de diseño más detallado.
 Para otras audiencias, su documentación describe las decisiones tomadas
 sobre el diseño y por lo tanto, que cosas son ciertas sobre la arquitectura.
\end_layout

\begin_layout Standard
Quizás el concepto más importante asociado con la documentación de arquitecturas
 de software es el de 
\emph on
vista
\emph default
.
 Recordando la definición de la sección anterior, vemos a la arquitectura
 como 
\begin_inset Quotes eld
\end_inset

la estructura o estructuras del sistema, que abarcan los e\SpecialChar \-
le\SpecialChar \-
men\SpecialChar \-
tos, sus
 propiedades externamente visibles, y las relaciones entre ellos
\begin_inset Quotes erd
\end_inset

.
 Una vista es una 
\emph on
representación
\emph default
 coherente de esos los elementos importantes que constituyen un sistema,
 tal como lo son el software o el hardware, respecto a la forma en que los
 involucrados la leen y escriben.
 La vista provee el principio básico de la documentación de una arquitectura
 de software:
\end_layout

\begin_layout Quote
Documentar una arquitectura significa documentar las vistas relevantes y
 luego agregar la documentación que se aplica a más de una vista.
\end_layout

\begin_layout Standard
Éste principio es útil porque separa el problema de la documentación en
 las siguientes partes 
\begin_inset LatexCommand cite
key "CLEMENTS02"

\end_inset

:
\end_layout

\begin_layout Description
Elección\InsetSpace ~
de\InsetSpace ~
las\InsetSpace ~
vistas\InsetSpace ~
relevantes.
 La elección depende de los usos que se le espera dar a la documentación.
 A través de estas vistas se deben expresar al menos tres aspectos del sistema:
 (a) cómo está estructurado el conjunto de unidades de implementación, (b)
 cómo está estructurado el conjunto de elementos que tienen 
\emph on
comportamiento
\emph default
 e interacciones en tiempo de ejecución y (c) cómo se relaciona con elementos
 de su ambiente que no son software.
\end_layout

\begin_layout Description
Documentación\InsetSpace ~
de\InsetSpace ~
una\InsetSpace ~
vista.
 Si bien no existe un 
\emph on
template
\emph default
 estándar de documentación de vistas, es esperable que contenga al menos
 la siguiente información:
\end_layout

\begin_deeper
\begin_layout Enumerate
Presentación primaria: por lo general es un gráfico; presenta los elementos
 principales y sus relaciones.
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Aca listan los items
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Catálogo de elementos: detalla los elementos y relaciones presentados en
 la presentación primaria.
\end_layout

\begin_layout Enumerate
Diagrama de contexto: muestra cómo lo reflejado en la vista se relaciona
 con su ambiente usando el vocabulario de la misma.
\end_layout

\begin_layout Enumerate
Guía de variabilidad: explica en detalle los puntos de variación que son
 parte de la arquitectura y están explicados en esta vista.
\end_layout

\begin_layout Enumerate
Razonamiento arquitectónico: explica cómo el diseño reflejado en esta vista
 llegó a ser como es.
\end_layout

\begin_layout Enumerate
Glosario de términos.
\end_layout

\begin_layout Enumerate
Otra información.
\end_layout

\end_deeper
\begin_layout Description
Documentación\InsetSpace ~
de\InsetSpace ~
comportamiento.
 Las vistas presentan 
\emph on
información estructural
\emph default
 del sistema.
 Sin embargo, ésta información 
\emph on
no es suficiente
\emph default
 para razonar acerca de ciertas propiedades del mismo.
 Exactamente qué aspectos del comportamiento modelar va a depender del tipo
 de sistema que se está diseñando: en un sistema de tiempo real importan
 las propiedades temporales de los eventos; mientras que en un sistema bancario
 las secuencias de eventos, las transacciones atómicas y los procedimientos
 de 
\emph on
rollback
\emph default
 son lo más importante.
\end_layout

\begin_layout Description
Documentación\InsetSpace ~
de\InsetSpace ~
la\InsetSpace ~
información\InsetSpace ~
que\InsetSpace ~
se\InsetSpace ~
aplica\InsetSpace ~
a\InsetSpace ~
más\InsetSpace ~
de\InsetSpace ~
una\InsetSpace ~
vista.
 Cons\SpecialChar \-
ti\SpecialChar \-
tu\SpecialChar \-
ye el complemento de la documentación de las vistas, es decir la
 información que se aplica a más de una vista o al paquete de documentación
 en sí.
 Consiste de tres aspectos principales, el cómo, el qué y el por qué:
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Aca los enumeran
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Cómo está organizada la documentación, de manera que los interesados en
 la arquitectura pueden encontrar la información que necesitan eficientemente.
\end_layout

\begin_layout Enumerate
Qué es la arquitectura: una descripción general del sistema para orientar
 al lector acerca del propósito del sistema, la forma en que las vistas
 se relacionan entre sí, una lista de elementos y dónde aparecen, y un glosario
 que se aplica a toda la arquitectura.
\end_layout

\begin_layout Enumerate
Por\InsetSpace ~
qué la arquitectura es como es: el contexto del sistema, restricciones
 externas que han sido impuestas para darle forma a la arquitectura de cierta
 manera, y el razonamiento para las decisiones de mayor granularidad y escala.
\end_layout

\end_deeper
\begin_layout Standard
La documentación de la arquitectura libera al arquitecto de tener que contestar
 cientos de preguntas acerca de ella.
 Para crear la documentación, se deben entender a todas las partes interesadas
 y cómo esperan usarla.
 Por lo tanto, todos los interesados deben ser tenidos en cuenta a la hora
 de elegir las vistas relevantes.
\end_layout

\begin_layout Standard
Entre las múltiples representaciones gráficas posibles, una de las descripciones
 arquitectónicas elegidas para representar la arquitectura reconstruida
 de un sistema es la de UCMs, en especial, para representar el comportamiento
 
\begin_inset LatexCommand cite
key "BUHR95"

\end_inset

.
 A diferencia de otras descripciones arquitectónicas (basadas principalmente
 en mostrar la estructura de sistemas), este tipo de notaciones ayuda a
 las personas a razonar acerca del comportamiento del sistema.
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Falta introducir porque UCMs!!!
\end_layout

\end_inset

 Otra de las razones principales de la elección de esta notación se basa
 en que permite la especificación conjunta de los principales aspectos arquitect
ónicos independientemente de la tecnología en la cual el sistema fue implementad
o.
 En la siguiente sección se describe la notación de los 
\emph on
Use-Case Maps
\emph default
 y un ejemplo en donde se muestra su uso.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Use-Case-Maps"

\end_inset

Use-Case Maps
\end_layout

\begin_layout Standard
Los 
\emph on
Use-Case Maps
\emph default
 (UCM) son una notación para diseño de alto nivel que ayuda a las personas
 tanto a expresar como a razonar acerca de los patrones de comportamiento
 de alta granularidad de un sistema 
\begin_inset LatexCommand cite
key "BUHR95"

\end_inset

.
 El nombre proviene del hecho de que son una notación visual para casos
 de uso y una extensión de ellos hacia el diseño de alto nivel.
 Sin embargo, el modelo no depende de la definición de casos de uso: provee
 su propia definición en sus propios términos.
\end_layout

\begin_layout Standard
Por sus cualidades, los UCMs son la notación elegida para representar las
 vistas comportamentales de las arquitecturas reconstruidas.
 
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Cual es la relacion con su trabajo
\end_layout

\end_inset

Los UCMs no son un lenguaje apropiado para especificación formal de comportamien
to, ya que deliberadamente dejan algunas decisiones abiertas para ser tomadas
 durante el diseño detallado.
 Los UCM son solamente una notación para razonar y explicar el comportamiento
 de un sistema.
 Es importante de tener esto presente ya que es fácil caer en la trampa
 de buscar o colocar más información de la que corresponde encontrar en
 ellos.
\end_layout

\begin_layout Subsection
Notación básica e interpretación
\end_layout

\begin_layout Standard
A continuación se da una breve descripción de los diferentes elementos visuales
 que conforman la notación, junto con los conceptos asociados a cada uno
 de ellos.
 La idea principal detrás de los UCMs es la de modelar los casos de uso
 mediante secuencias causales (en adelante, 
\emph on
paths
\emph default
) a través de estructuras organizacionales, de esta manera combinando vistas
 estructurales y comportamentales de la arquitectura del sistema.
 Los UCMs tienen cuatro elementos principales: responsabilidades, paths,
 componentes y acoplamientos entre paths.
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename img/responsibility.png
	scale 50

\end_inset

\InsetSpace ~
Responsabilidades.
 Expresan las funciones de las que cada componente es responsable.
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename img/path.png
	scale 50

\end_inset

\InsetSpace ~
Paths.
 Trazan la progresión de causas y efectos entre responsabilidades.
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename img/component.png
	scale 50

\end_inset

\InsetSpace ~
Componentes.
 Actúan como contenedores de responsabilidades.
\end_layout

\begin_layout Description
Acoplamientos.
 Sirven para conectar paths y así lograr patrones de mayor granularidad.
\end_layout

\begin_deeper
\begin_layout Description
\begin_inset Graphics
	filename img/andFork.png
	scale 50

\end_inset

\InsetSpace ~

\emph on
And\InsetSpace ~
Forks
\emph default
.
 Indican la bifurcación en dos 
\emph on
paths
\emph default
 concurrentes.
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename img/andJoin.png
	scale 50

\end_inset

\InsetSpace ~

\emph on
And\InsetSpace ~
Joins
\emph default
.
 Indican la unión de dos 
\emph on
paths
\emph default
 concurrentes.
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename img/orFork.png
	scale 50

\end_inset

\InsetSpace ~

\emph on
Or\InsetSpace ~
Forks
\emph default
.
 Indican el fin de un segmento causal común entre dos 
\emph on
paths
\emph default
.
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename img/orJoin.png
	scale 50

\end_inset

\InsetSpace ~

\emph on
Or\InsetSpace ~
Joins
\emph default
.
 Indican el comienzo de un segmento causal común entre dos 
\emph on
paths
\emph default
.
\end_layout

\end_deeper
\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Ejemplo-UCM"

\end_inset

Ejemplo
\end_layout

\begin_layout Standard
La Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Ejemplo-de-UCM"

\end_inset

 muestra un ejemplo de UCMs, donde hay un simple escenario donde una modificació
n en el modelo requiere de la notificación a la interfase de usuario y a
 un 
\emph on
logger
\emph default
.
 El sistema está organizado alrededor de un patrón de diseño 
\emph on
Observer-Observable
\emph default
, en el cual el componente 
\emph on
Observable 
\emph default
y los componentes 
\emph on
Observers
\emph default
 están desacoplados.
 La responsabilidad 
\emph on
notifyObservers
\emph default
 en 
\emph on
Observable
\emph default
 envía una notificación de cambio a todos los 
\emph on
Observers
\emph default
.
 Ésto causa la activación de la responsabilidad 
\emph on
update
\emph default
 de cada 
\emph on
Observer
\emph default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserverObservableSample.jpg
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Ejemplo-de-UCM"

\end_inset

Ejemplo de UCM
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Note Note
status collapsed

\begin_layout Standard
Rol en la documentación de arquitecturas
\end_layout

\begin_layout Standard
Documentar el comportamiento añade detalle semántico relacionado con el
 tiempo a los elementos y sus interacciones.
 Los modelos comportamentales agregan información que revela el orden de
 las interacciones entre los elementos, las oportunidades para concurrencia,
 y las dependencias que tienen las interacciones con el tiempo.
\end_layout

\begin_layout Standard
Para atribuir comportamiento a elementos de una descripción arquitectónica,
 es necesario agregar 
\begin_inset Quotes eld
\end_inset

tejido conectivo
\begin_inset Quotes erd
\end_inset


\begin_inset LatexCommand cite
key "BUHR96,BUHR99"

\end_inset

.
 Una forma de introducir este tipo de tejido es usar conexiones que soportan
 interacciones (llamadas o mensajes) entre elementos a través de interfaces.
 Dichas interfaces definen los nombres y parámetros de todas las posibles
 interacciones, ocultando detalles de la lógica interna de los componentes.
 A estas conexiones se les puede atribuir comportamiento al describir esce\SpecialChar \-
na\SpecialChar \-
rios
 de interacción usando diagramas de interacción UML (también conocidos como
 diagramas de secuencia de mensajes).
 Sin embargo, la combinación de conexiones, documentación de interfaces
 y diagramas de interacción muchas veces se excede en cantidad de detalles
 -tales como 
\emph on
operaciones
\emph default
, 
\emph on
ensamblaje
\emph default
 y 
\emph on
estructura de herencia
\emph default
 en sistemas orientados a objetos- y hace difícil entender sistemas de cualquier
 tamaño y complejidad.
 Es necesario tomar distancia de estos detalles para entender un sistema
 en términos arquitectónicos.
\end_layout

\begin_layout Standard
Los UCMs suben el nivel de abstracción al simplificar los más importantes
 factores de complejidad:
\end_layout

\begin_layout Description
Operaciones.
 Las secuencias de invocación de operaciones son reemplazadas por 
\emph on
paths
\emph default
 causa-efecto.
 El comportamiento no se representa en términos de interacciones entre component
es a través de mensajes, sino en términos de secuencias causa-efecto entre
 
\emph on
responsabilidades
\emph default
 de los componentes.
 En otras palabras, las interfaces de los componentes, y las interacciones
 entre interfaces, tales como llamadas y mensajes, son consideradas detalles.
 Las responsabilidades pueden ser de mayor granularidad que las llamadas
 y mensajes, y de esta manera se reduce el nivel de compromiso con los detalles.
\end_layout

\begin_layout Description
Ensamblaje\InsetSpace ~
y\InsetSpace ~
Estructura\InsetSpace ~
de\InsetSpace ~
Herencia.
 A nivel de UCMs, el único requerimiento para la 
\begin_inset Quotes eld
\end_inset

conectabilidad
\begin_inset Quotes erd
\end_inset

 de un componente es que sea capaz de realizar las responsabilidades requeridas.
 Los detalles necesarios para realmente conectar (física o lógicamente)
 un componente pueden ser diferidos hacia otro tipo de documentación.
 A su vez, la dependencia de las descripciones de comportamiento sobre los
 detalles como la estructura de herencia también es eliminada por el hecho
 de que los UCMs son modelos independientes de las descripciones de clases.
\end_layout

\begin_layout Standard
Los UCMs pueden ser derivados a partir de requerimientos informales o de
 casos de uso, si están disponibles.
 Las responsabilidades tienen que estar especificadas o ser inferidas de
 estos requerimientos.
 Se pueden crear casos de uso separados para funcionalidades individuales
 del sistema o inclusive para escenarios individuales.
 Muchas veces, la forma de modelar una interacción con UCMs depende de la
 intención del arquitecto.
 Sin embargo, el fuerte de esta notación reside principalmente en la integración
 de escenarios relacionados.
 En tales casos, los UCMs pueden usarse para ilustrar y razonar respecto
 a concurrencia, como por ejemplo en problemas de contención de recursos
 (múltiples paths usando un elemento, como se muestra en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "cap:UCM-contencion-recursos"

\end_inset

) o posibles situaciones de deadlock (dos paths en direcciones opuestas
 a través de al menos dos elementos en común, como se muestra en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "cap:UCM-deadlock"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "45col%"
special "none"
height "1pt"
height_special "totalheight"
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/nfrontini/facultad/tesis/tesis tincho/img/ucmConcurrency.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "cap:UCM-contencion-recursos"

\end_inset

UCM de un problema de contención de recursos
\end_layout

\end_inset


\end_layout

\end_inset


\hfill

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "45col%"
special "none"
height "1pt"
height_special "totalheight"
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/nfrontini/facultad/tesis/tesis tincho/img/ucmDeadlock.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "cap:UCM-deadlock"

\end_inset

UCM de una posible situación de deadlock
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Necesidad-de-Documentación-Arquitectónica"

\end_inset

Necesidad de Documentación Arquitectónica
\end_layout

\begin_layout Standard
En la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sub:Descriptiones_Arquitectónicas"

\end_inset

 se explicaron las razones principales por las que la documentación de una
 arquitectura es fundamental para el desarrollo de software.
 La documentación es la vía de comunicación entre desarrolladores, y permite
 que el sistema se diseñe, implemente, pruebe, instale y mantenga siguiendo
 a la arquitectura que lo sostiene.
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Esto podria ponerse en una única sección...
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Inexistencia de documentación
\end_layout

\begin_layout Standard
Todo sistema que tiene software tiene una arquitectura de software.
 Sin embargo, no necesariamente existe en la práctica una documentación
 acertada de esta arquitectura.
 Quizás toda la gente que diseñó el sistema se ha ido, la documentación
 es escaza o nunca se produjo, el código fuente se ha perdido o nunca se
 entregó, y lo único con que se cuenta es con el código ejecutable binario.
 No obstante, una arquitectura puede existir independientemente de su especifica
ción, lo que demuestra la importancia de la documentación.
\end_layout

\begin_layout Standard
Por lo tanto, el hecho de lidiar con sistemas que no poseen documentación
 es un escenario que ocurre con frecuencia dentro de las organizaciones.
 Sistemas legados suelen no poseer documentación alguna y es muy común que
 nuevos sistemas de software tengan que integrarse con estos.
\end_layout

\begin_layout Subsection
Erosión arquitectónica
\end_layout

\begin_layout Standard
Asegurarse de que un sistema sea construido en conformidad con su diseño
 arquitectónico durante su desarrollo, evolución y mantenimiento es importante,
 ya que divergencias significativas entre arquitectura e implementación
 pueden comprometer la estructura, estilo y propiedades que han sido establecida
s mediante cuidadoso análisis a nivel arquitectónico 
\begin_inset LatexCommand cite
key "ABIANTOUN05b"

\end_inset

.
 
\end_layout

\begin_layout Standard
Durante las diferentes etapas del desarrollo de software, pueden producirse
 cambios en la documentación arquitectónica que luego no son reflejados
 en el código, o cambios en el código que no son apropiadamente acomodados
 en la documentación.
 Siendo la arquitectura una guía fundamental durante todo el ciclo de vida
 del sistema, el desfasaje entre documentación e implementación de una arquitect
ura se hará cada vez más difícil de remediar por sus desarrolladores, finalmente
 deteriorando la calidad del producto.
\end_layout

\begin_layout Standard
Desafortunadamente, debido a la evolución natural del sistema, es probable
 que la arquitectura y la implementación pierdan consistencia.
 Una vez que el diseño arquitectónico está listo, típicamente todos los
 esfuerzos se focalizan en la implementación, y esto hace que la documentación
 se desactualice progresivamente.
 Por ejemplo, nuevos requerimientos pueden causar un rediseño de la arquitectura
, con cambios consecuentes en algunas partes de la implementación; y por
 otro lado, algunas tareas de mantenimiento pueden producir cambios en el
 código que deberían ser reflejados en modificaciones de la arquitectura.
 Si bien es aceptable que exista temporalmente cierto desfasaje, normalmente
 los desarrolladores trabajan en la implementación sin mantener el modelo
 arquitectónico, el cual rápidamente queda desactualizado.
\end_layout

\begin_layout Standard
En algunos casos, los desarrolladores pueden introducir sutiles diferencias
 estructurales que invalidan intenciones claves de la arquitectura.
 Por ejemplo, en un sistema estructurado en capas, es posible que un programador
 inadvertido genere dependencias no deseadas al saltear la capa inmediatamente
 inferior.
 Análogamente, en el desarrollo de sistemas 
\emph on
web
\emph default
 multibanda es común el error de invocar directamente a la base de datos
 desde la banda de presentación.
 Como resultado, los arquitectos a menudo deben lidiar en sus análisis con
 conocimiento incompleto e incorrecto debido a defectos en la documentación
 
\begin_inset LatexCommand cite
key "ALDRICH05"

\end_inset

.
 En estos casos, las relaciones de los componentes (en el nivel arquitectónico)
 con clases y métodos (en el nivel de implementación) ya no se mantienen,
 y los desarrolladores deben restablecer la consistencia manualmente.
 Éste fenómeno se conoce como 
\emph on
corrimiento arquitectura-implementación
\emph default
 
\begin_inset LatexCommand cite
key "PERRY92"

\end_inset

 o 
\emph on
erosión arquitectónica
\emph default
.
 Si no se maneja correctamente, revierte los beneficios del desarrollo centrado
 en la arquitectura, ya que se pierde la trazabilidad entre re\SpecialChar \-
que\SpecialChar \-
ri\SpecialChar \-
mien\SpecialChar \-
tos,
 decisiones de diseño y artefactos de implementación.
 
\end_layout

\begin_layout Subsection
Reconstrucción de arquitecturas
\end_layout

\begin_layout Standard
La Reconstrucción de Arquitecturas de Software es una técnica para generar
 representaciones arquitectónicas de un sistema que puede ser utilizada
 de diversas formas.
 El principal uso de esta representación es el de documentar la arquitectura
 existente de un sistema.
 Si no existe la documentación o la documentación disponible esta desactualizada
, la representación obtenida mediante la reconstrucción puede ser usada
 como una base para la re-documentación de la arquitectura.
 Esta representación también puede ser usada como un punto de comienzo para
 realizar re-ingeniería sobre el sistema y crear una nueva arquitectura.
 Finalmente, la representación puede ser usada como una forma de identificar
 componentes re-usables o para establecer una arquitectura base dentro de
 una línea de productos de software 
\begin_inset LatexCommand cite
key "Rick2003"

\end_inset

.
\end_layout

\begin_layout Standard
Existen diferentes técnicas y enfoques para recuperar representaciones de
 la arquitectura de un sistema.
 Esto hace que sea difícil describir las distintas etapas que un proceso
 de reconstrucción de arquitecturas requiere.
 Sin embargo, casi todos los enfoques estructuran un proceso en un ciclo
 basado en extraer, abstraer y visualizar la información.
 En todos los casos, este proceso es asistido por herramientas, las cuales
 extraen información del sistema (ej.
 código fuente) para ir agregando niveles de abstracción cada vez mas altos.
 El resultado final son diagramas que representan la arquitectura del sistema.
\end_layout

\begin_layout Standard
Una definición genérica de la Reconstrucción de Arquitecturas de Software
 es la proponen Bass et.al.
 en 
\begin_inset LatexCommand cite
key "SAIP"

\end_inset

, definiendo ésta como como un proceso interpretativo, interactivo e iterativo
 que involucra muchas actividades: no es un proceso totalmente automático.
 Requiere de la capacidad y de la atención del experto en ingeniería reversa
 y del arquitecto (o alguien con conocimientos sobre la arquitectura del
 sistema).
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Conclusión"

\end_inset

Resumen y discusión 
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-yo le pondria resumen y discusión si es que hace eso
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este capítulo se introdujo el concepto de arquitectura de software, una
 disciplina que cumple un rol central en la toma de decisiones de diseño
 y en la comunicación entre todos los participantes del desarrollo de un
 producto de software.
 Como vehículo de comunicación, su documentación es fundamental, pues la
 falta de ella, o peor aún, el descuido al producirla y mantenerla, anulan
 o revierten todos los beneficios que el desarrollo centrado en la arquitectura
 puede aportar.
\end_layout

\begin_layout Standard
Posteriormente se presentó la notación de UCMs, un modelo para la descripción
 de patrones de comportamiento y algunos aspectos estructurales en un alto
 nivel de abs\SpecialChar \-
trac\SpecialChar \-
ción y granularidad.
 Esta notación es especialmente útil para la documentación de comportamiento
 a nivel arquitectónico, ya que permite expresar, analizar y comunicar las
 trazas causa-efecto que proyectan los casos de uso sobre el sistema, dejando
 de lado los detalles contextualmente irrelevantes.
\end_layout

\begin_layout Standard
En último lugar se ofreció una breve descripción al problema de la escaza
 documentación arquitectónica evidenciando su necesidad.
 Muchos sistemas de software carecen de documentación arquitectónica.
 En otros casos, debido a la evolución natural de un sistema de software,
 es muy probable que la arquitectura documentada y su implementación pierdan
 consistencia, lo que puede perjudicar todos los beneficios del desarrollo
 centrado en la arquitectura.
 Éste problema ha motivado la creación de herramientas que, mediante diversos
 enfoques, intentan reconstruir representaciones arquitectónicas útiles
 para documentar la arquitectura.
 El capítulo siguiente se centra precisamente en estas herramientas.
\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:Trabajos-relacionados"

\end_inset

Trabajos relacionados
\end_layout

\begin_layout Standard
El problema de la falta de documentación arquitectónica o incluso su desactualiz
ación, como así también la re-ingeniería y la desicronización entre la arquitect
ura y su implementación han sido reconocidos en el capítulo anterior como
 los principales motivadores de este trabajo.
\end_layout

\begin_layout Standard
En este capítulo intentaremos brindar una visión mas amplia sobre los distintos
 aportes existentes relacionados con la reconstrucción de arquitecturas,
 destacando los rasgos principales de cada enfoque.
\end_layout

\begin_layout Standard
Muchos enfoques de reconstrucción de arquitecturas y herramientas para apoyar
 dichos enfoques han sido cubiertos en la literatura.
 La mayoría de estos enfoques están basados en un ciclo extraer-abstraer-present
ar, en el cual el sistema es analizado con el propósito de popular un repositori
o, que luego es consultado para poder construir representaciones abstractas
 del sistema que son presentadas en forma interactiva y adecuada al ingeniero
 de software.
 Tilley et.
 al 
\begin_inset LatexCommand cite
key "Tilley1996"

\end_inset

 describe el enfoque extraer-abstraer-presentar con mayor detalle, refiriéndose
 a los pasos de recolección de información, inferencia de conocimiento,
 y presentación de la información.
\end_layout

\begin_layout Standard
En la siguiente sección resumimos aquellos trabajos que tratan la reconstrucción
 de arquitecturas de software y discutiremos los enfoques tomados por ellos.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Aportes-científicos-relacionados"

\end_inset

Aportes relacionados
\end_layout

\begin_layout Standard
La problemática de descubrir el modelo arquitectónico de un sistema completament
e implementado ha sido aborda de diversas maneras.
 Los enfoques analizados en este trabajo pueden clasificarse en:
\end_layout

\begin_layout Standard
• Reconstrucción manual con el apoyo de herramientas.
\end_layout

\begin_layout Standard
• Lenguajes de consultas para escribir las pautas para construir agregaciones
 o 
\emph on
clusteres
\emph default
 automáticamente .
\end_layout

\begin_layout Standard
• Utilización de otras técnicas, incluida la agrupación, 
\emph on
data
\emph default
 
\emph on
mining
\emph default
, utilizando lenguajes de descripción de arquitecturas (ADLs).
\end_layout

\begin_layout Standard
Los siguientes son algunos de los enfoques principales en cada categoría.
 No es una lista exhaustiva, pero enumera un conjunto representativo de
 enfoques y herramientas.
\end_layout

\begin_layout Subsection
Métodos de reconstrucción manual con el apoyo de herramientas
\end_layout

\begin_layout Standard
A esta categoria pertenecen aquellas herramientas y enfoques que utilizan
 algún tipo de herramienta como analizadores de código fuente o herramientas
 de visualización para asistir en el proceso de reconstruccion.
 No hay automatización de las tareas de evaluación o inferencia de la informació
n.
 Éstas tareas son de indole manual.
\end_layout

\begin_layout Paragraph

\emph on
Portable Bookshelf
\emph default
 (PBS)
\end_layout

\begin_layout Standard

\emph on
Portable Bookshelf 
\emph default
(PBS) es una herramienta usada para generar una biblioteca de software (
\emph on
bookshelf
\emph default
) 
\begin_inset LatexCommand cite
key "Finnigan97"

\end_inset

.
 La información contenida en la biblioteca incluye código fuente como también
 así cualquier otra documentación sobre el sistema como pueden ser casos
 de test, análisis de 
\emph on
performance
\emph default
, planes futuros, diagramas arquitectónicos e información sobre la historia
 del proyecto.
 Bowman y otros han presentado un método para extraer documentación arquitectóni
ca desde el código de un sistema completamente implementado utilizando PBS
\begin_inset LatexCommand cite
key "BOWMAN99"

\end_inset

.
 En un ejemplo ellos reconstruyeron la arquitectura de un sistema Linux.
 Analizaron el código fuente utilizando el programa cfx (
\emph on
c-code fact extractor
\emph default
) para obtener información del código y poder generar conjuntos de relaciones
 entre los elementos identificados.
 Luego, manualmente crearon una descomposición del sistema Linux en subsistemas
 y asignaron los archivos fuentes a dichos subsistemas.
 Por medio de una herramienta de manipulación de hechos (
\emph on
facts
\emph default
), determinaron las relaciones entre los subsistemas identificados.
 Finalmente, utilizan una herramienta de visualización para visualizar la
 estructura del sistema extraída.
 El refinamiento de la estructura resultante se lleva a cabo moviendo los
 archivos de código fuente entre subsistemas.
\end_layout

\begin_layout Paragraph
Rigi
\end_layout

\begin_layout Standard
Rigi es una herramienta de visualización y manipulación de información de
 software
\begin_inset LatexCommand cite
key "RIGI2002"

\end_inset

.
 Contiene un interprete para aplicar operaciones a la información visualizada,
 y permite también la manipulación manual de la información presentada al
 usuario.
 El principal aporte de esta herramienta son los 
\emph on
parsers
\emph default
 para extraer la información de varios lenguajes en un formato propio, Rigi
 Standard Format (RSF).
\end_layout

\begin_layout Paragraph
SHriMP
\end_layout

\begin_layout Standard
SHriMP es un sistema de visualización y navegación de la información 
\begin_inset LatexCommand cite
key "Storey2001,Shrimp2002"

\end_inset

.
 Cuando es usado para reconstrucción, la herramienta puede asistir al usuario
 en generar vistas arquitectónicas de alto nivel agrupando manualmente elementos
 en un grafo.
 La herramienta toma como entrada archivos RSF (Rigi Standard Format).
\end_layout

\begin_layout Subsection
Enfoques basados en lenguajes de consultas
\end_layout

\begin_layout Standard
El siguiente conjunto de enfoques y herramientas soportan el uso de lenguajes
 de consultas (Query Languajes) para la reconstrucción.
 En cada uno de estos, consultas a una base de conocimiento son realizadas
 con el objetivo de asistir en la agrupación de componentes de bajo nivel
 componentes de nivel superior.
 O bien, partiendo de un modelo de alto nivel se realizan consultas sobre
 la base de conocimiento tratando de reconocer cada uno estos componentes
 de alto nivel.
\end_layout

\begin_layout Paragraph
Mitre
\end_layout

\begin_layout Standard
Mitre es un 
\emph on
framework
\emph default
 pensado para la reconstrucción de arquitecturas que soporta tanto un enfoque
 
\emph on
bottom-up
\emph default
 como 
\emph on
top-down
\emph default
 
\begin_inset LatexCommand cite
key "Harris1995"

\end_inset

.
 El 
\emph on
framework
\emph default
 consiste de tres componentes: una representación arquitectónica, un motor
 de consultas sobre el código fuente y la capacidad de ofrecer una vista
 del sistema de alto nivel.
 El enfoque 
\emph on
bottom-up
\emph default
 usa la vista de alto nivel para mostrar la estructura de archivos y componentes
 del sistema y a partir de ahí permite ir organizando la información en
 
\emph on
clusters
\emph default
 más significativos.
 El análisis 
\emph on
top-down
\emph default
 comienza desde un estilo arquitectónico particular definiendo los componentes
 que luego tendrán que ser reconocidos en el software.
 Consultas de reconocimientos son ejecutadas para determinar si los componentes
 esperados existen en el código fuente.
 Este enfoque esta basado en un motor de consultas que es independiente
 del lenguaje de implementación del sistema.
 Las consultas se realizan sobre un árbol de análisis sintáctico (AST) el
 cual es construido luego de parsear el código fuente.
\end_layout

\begin_layout Paragraph
Dali 
\end_layout

\begin_layout Standard
Dali es una colección de herramientas en la forma de workbench.
 Entre estas herramientas se destacan Rigi y PostgreSQL como repositorio
 de la aplicación.
 Rigi provee la manipulación y visualización de las vistas generadas y la
 extensión que aporta Dali a Rigi provee la habilidad de definir y aplicar
 patrones de consultas sobre los datos para generar vistas arquitectónicas
 del sistema.
 La información es extraída del código fuente utilizando una herramienta
 de análisis y luego cargadas en Dali.
 Esta información es almacenada en la base de datos PostgreSQL y visualizada
 en Rigi.
 Las consultas son escritas en combinación de SQL y Perl con el propósito
 de generar abstracciones de la información.
 
\end_layout

\begin_layout Paragraph
AMR (
\emph on
Architecture Reconstruction Method
\emph default
) 
\end_layout

\begin_layout Standard
ARM es un método de reconstrucción de arquitecturas semi-automático el cual
 puede ser usado para asistir en la recuperación de arquitecturas para sistemas
 que son diseñados e implementados usando patrones 
\begin_inset LatexCommand cite
key "GUO99"

\end_inset

.
 ARM consiste en cuatro fases principales: 
\end_layout

\begin_layout Enumerate
Desarrollar un plan para reconocer patrones concretos, 
\end_layout

\begin_layout Enumerate
extracción de un modelo a partir del código fuente, 
\end_layout

\begin_layout Enumerate
detección y evaluación de instancias de patrones y 
\end_layout

\begin_layout Enumerate
reconstrucción y análisis de la arquitectura.
 
\end_layout

\begin_layout Standard
El mecanismo es simple, reglas que definen patrones son transformadas en
 consultas que serán aplicadas automáticamente para detectar instancias
 de dichos patrones en el modelo.
 Refinando dichas consultas de patrones se puede mejorar la precisión en
 la detección de patrones.
\end_layout

\begin_layout Paragraph
Riva 
\end_layout

\begin_layout Standard
Riva provee un enfoque basado en extraer información del código fuente,
 cargar dicha información en una base Prolog, y usar hechos Prolog para
 construir abstracciones de esa información y visualizar esas abstracciones
 usando Rigi 
\begin_inset LatexCommand cite
key "Riva2000"

\end_inset

.
 El proceso que Riva describe consiste en seis fases: 
\end_layout

\begin_layout Enumerate
Desarrollar una descripción a alto nivel de la arquitectura; 
\end_layout

\begin_layout Enumerate
Extraer información del código fuente; 
\end_layout

\begin_layout Enumerate
Abstraer para generar un modelo arquitectónico; 
\end_layout

\begin_layout Enumerate
Reglamentación del sistema; 
\end_layout

\begin_layout Enumerate
Analizar el sistema y crear un plan de mejoras; y 
\end_layout

\begin_layout Enumerate
Reorganizar la arquitectura.
\end_layout

\begin_layout Subsection
Otras técnicas
\end_layout

\begin_layout Standard
En esta categoria estan incluidos enfoques y herramientas que utilizan tecnicas
 como la utilizacion de lenguajes arquitectonicos (ADLs), el analisis de
 traces de ejecucion, redes de Petri entre otras.
\end_layout

\begin_layout Paragraph
DiscoTect
\end_layout

\begin_layout Standard
DiscoTect que mapea eventos de bajo nivel del sistema a operaciones arquitectóni
cas abstractas; interpretadas luego por un motor especial que ﬁnalmente
 construye la estructura arquitectónica del sistema en tiempo de ejecución
 como una descripción ACME 
\begin_inset LatexCommand cite
key "ACME"

\end_inset

.
 La idea principal de este trabajo es traducir estilos de implementación
 a estilos arquitectónicos.
 La traducción se deﬁne conceptualmente como una red de Petri coloreada
 
\begin_inset LatexCommand cite
key "JENSON94"

\end_inset

, empleada durante la ejecución para interpretar los eventos de bajo nivel
 y traducirlos cuando corresponda a eventos arquitectónicos, como por ejemplo:
 creación de componentes, establecimiento de conexiones entre ellos, etc.
 Los eventos de bajo nivel son instrucciones Java ejecutadas sobre una máquina
 virtual y se obtienen instrumentando el programa mediante AspectJ 
\begin_inset LatexCommand cite
key "AOP01"

\end_inset

.
 La arquitectura de la herramienta DiscoTect puede observarse en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Arquitectura-DiscoTect"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/discotectArch.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Arquitectura-DiscoTect"

\end_inset

Arquitectura de la herramienta DiscoTect
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La red de Petri coloreada se obtiene como resultado de la compilación de
 una especiﬁcación escrita en un lenguaje especial llamado DiscoStep.
 DiscoStep fue diseñado para traducir la ejecución de instrucciones Java
 a eventos arquitectónicamente signiﬁcativos, considerando que la aridad
 de esta relación entre ambos tipos es n-m y que normalmente los eventos
 de alto nivel pueden ocurrir simultáneamente cuando el sistema bajo análisis
 posee varios procesos o hilos de ejecución concurrentes.
 Para que esta especiﬁcación sea efectiva, el programador debe seguir estrictame
nte los estilos de implementación que permitirán construir correctamente
 la red de Petri coloreada.
 Por ejemplo, si el sistema respeta el estilo arquitectónico cliente-servidor
 
\begin_inset LatexCommand cite
key "BUSCHMANN96"

\end_inset

, el programador deberá codiﬁcar las clases Java signiﬁcativas para este
 estilo como “cliente”, “servidor” y “conexión cliente-servidor” con alguna
 convención que ayude a la red de Petri a detectar estos eventos.
 Si la especiﬁcación DiscoStep espera que el servidor sea representado por
 un 
\emph on
socket
\emph default
 TCP con el suﬁjo “ServerSocket”, el programador deberá seguir este estándar
 para que el mecanismo sea efectivo.
 Los autores de esta herramienta aseguran bajo la condición de que las implement
aciones respeten siempre los mismos estilos, que DiscoTect puede monitorear
 diferentes sistemas sin que sea necesario modiﬁcar la especiﬁcación del
 mapeo entre eventos de bajo nivel y eventos de alto nivel, es decir, sin
 cambiar el código DiscoStep.
 Aunque este enfoque es interesante para visualizar la evolución de una
 arquitectura durante la ejecución de su implementación, es importante hacer
 notar que esta evolución se representa en términos estructurales de la
 arquitectura, en otras palabras, como los componentes y sus conectores
 se reconﬁguran entre si de acuerdo a las distintas situaciones que pueden
 ocurrir en el sistema.
 Los autores de DiscoTect han reportado dos casos de estudio de sistemas
 legados, en los que recuperaron tanto un estilo 
\emph on
pipe-and-ﬁlter
\emph default
 como uno cliente-servidor.
 La herramienta todavía necesita ser evaluada con estilos arquitectónicos
 más complejos, donde los mapeos a código no son necesariamente directos.
 
\end_layout

\begin_layout Paragraph
Focus
\end_layout

\begin_layout Standard
Focus 
\begin_inset LatexCommand cite
key "MEDVIDOVIC06"

\end_inset

 propone un enfoque en el cual su objetivo es extraer una descripción estructura
l de la arquitectura en función de la información provista por su implementación
 y el desarrollador.
 El código fuente de una aplicación es analizado estáticamente para obtener
 un diagrama de clases UML y luego las clases interrelacionadas son agrupadas
 en componentes.
 Los mapeos deﬁnen a los componentes como un grupo de clases relacionadas.
 El proceso de 
\emph on
clustering
\emph default
 para determinar los componentes utiliza diferentes políticas, principalmente
 basadas en las relaciones de dependencia entre clases Java.
 Los casos de uso son especiﬁcados por el arquitecto y luego chequeados
 parcialmente en base a la inspección de código fuente.
 Como contras, se puede mencionar la escasa automatización (por ejemplo,
 las abstracciones deben ser realizadas por el usuario) y nuevamente, la
 falta de soporte para aspectos comportamentales de la arquitectura como
 es el caso de las representaciones UCM.
\end_layout

\begin_layout Paragraph
KLOCwork’s Architecture Excavation method (KAE)
\end_layout

\begin_layout Standard
KAE, un enfoque que aborda la especiﬁcación UCM y emplea mecanismos de ingenierí
a reversa (Amyot et.
 al.
 
\begin_inset LatexCommand cite
key "AMYOT-SAM02"

\end_inset

), extrae escenarios UCM a partir del análisis estático de código C++.
 Su ﬁnalidad es ayudar al nuevo desarrollador a comprender la arquitectura
 “escondida” detrás de una implementación preexistente.
 KAE utiliza una técnica híbrida basada en entrevistas (
\emph on
interviews
\emph default
) y etiquetado (
\emph on
tagging
\emph default
).
 Las entrevistas permiten obtener escenarios iniciales en base a charlas
 con desarrolladores involucrados y también mediante la inspección del código,
 por esta razón, esta técnica es completamente manual.
 El etiquetado, también de carácter manual, es un proceso donde el desarrollador
 asocia etiquetas semánticas a diferentes porciones del código fuente; más
 tarde estas etiquetas representarán responsabilidades de distintos componentes
 de la arquitectura.
 KAE aproxima los casos de uso iniciales, en forma de trayectorias a través
 de las diferentes etiquetas colocadas en el código fuente.
 La herramienta ofrece un compilador para generar un modelo estructural
 rudimentario de la arquitectura.
 Este modelo será transformado iterativamente para incrementar el nivel
 de abstracción y para eliminar cualquier dependencia intercomponente accidental.
 La estructura estática de la arquitectura es representada por medio de
 diagramas de paquete UML: los paquetes simbolizan componentes y las dependencia
s entre ellos, sus conexiones.
 Las conexiones entre componentes se detectan analizando las dependencias
 entre clases C++ pertenecientes a diferentes paquetes.
 La abstracción subsiguiente del modelo queda a cargo del usuario, quien
 tiene a su disposición para este propósito, dos operaciones: agregación
 y ajuste.
 La agregación permite seleccionar distintos bloques y agruparlos creando
 un nuevo nivel en la jerarquía.
 El ajuste es otra operación visual donde se mueven bloques para eliminar
 dependencias entre paquetes de niveles mas altos que fueron introducidos
 por emplazamientos accidentales de funcionalidad a nivel de archivo.
 Como las etiquetas se aplicaron antes al código fuente y éste ya ha sido
 abstraído en componentes, la herramienta ahora es capaz de generar Use
 Case Maps como trayectorias a través de las distintas etiquetas colocadas
 en distintos puntos dentro de los paquetes (que ahora son vistos como component
es).
 Aunque éste es uno de los pocos enfoques que trabaja con las especiﬁcaciones
 UCM, se realizan demasiadas tareas manuales y otras tantas aplicando simpliﬁcac
iones gruesas, que introducen errores extra, como es el caso de suponer
 que existe una división de componentes que coincide perfectamente con la
 estructura jerárquica de paquetes del proyecto, o crear trayectorias UCM
 en base al análisis estático del código, cuando en realidad la especiﬁcación
 es inherentemente comportamental.
 Además, es el usuario quien determina en todo momento cuáles son las responsabi
lidades y las trayectorias de los distintos escenarios, limitando considerableme
nte la extracción de información.
\end_layout

\begin_layout Section
Resumen de características principales
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="5">
<features>
<column alignment="center" valignment="middle" leftline="true" width="15text%">
<column alignment="center" valignment="middle" leftline="true" width="15text%">
<column alignment="center" valignment="middle" leftline="true" width="15text%">
<column alignment="center" valignment="middle" leftline="true" width="15text%">
<column alignment="center" valignment="middle" leftline="true" rightline="true" width="15text%">
<row topline="true" bottomline="true" endhead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\align center

\series bold
Nombre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\align center

\series bold
Tipo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\align center

\series bold
Análisis implementación
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Leng.
 arquitectónico
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\align center

\series bold
Estrategia análisis
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PBS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Manual con ayuda de herramientas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rigi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Manual con ayuda de herramientas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Shrimp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Manual con ayuda de herramientas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estatico
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mitre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 Lenguaje de consultas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
UML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dali
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 Lenguaje de consultas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
extracción, abstracción, visualizacion
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ARM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 Lenguaje de consultas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
extracción, abstracción, visualizacion
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Riva
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 Lenguaje de consultas.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
extracción, abstracción, visualizacion
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DiscoTect
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
dinámico
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ACME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Traducción eventos implementación, eventos arquitectónicos
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Focus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
UML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Clustering clases, análisis incremental asistido por el usuario
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
KAE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Semi automática.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
estático
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
UML-UCM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Etiquetado, agregación, ajuste
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Características-principales-de"

\end_inset

Características principales de los distintos enfoques
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las propiedades de cada enfoque resumidas en esta sección son las siguientes:
\end_layout

\begin_layout Itemize
Tipo: De acuerdo a la clasificación realizada en la sección anterior, agrupamos
 los distintos enfoques según el grado de automatización de las tareas.
\end_layout

\begin_layout Itemize
Tipo de Análisis: Determina el tipo de análisis en el que se basa el enfoque.
 Análisis estático, aquel realizado sobre el código fuente, basado en la
 relaciones entre clases o componentes.
 Análisis dinámico, analiza las trazas de ejecución, es decir se analiza
 el comportamiento del sistema y no la estructura estática.
\end_layout

\begin_layout Itemize
Lenguaje arquitectónico: Lenguaje en el que se representa la arquitectura
 un vez recuperada.
\end_layout

\begin_layout Itemize
Estrategia de análisis: Detalle sobre el método utilizado para interpretar
 la información obtenida luego del análisis (estático o dinámico).
\end_layout

\begin_layout Section
Conclusiones
\end_layout

\begin_layout Standard
En este capítulo se han presentado los trabajos relacionados más importantes
 que tratan la reconstrucción de arquitecturas.
\end_layout

\begin_layout Standard
Como vimos la mayoría de los enfoques actuales de reconstrucción de arquitectura
s se encuentran basadas en el análisis del código fuente del sistema.
 Este tipo de técnicas trabajan adecuadamente si la implementación del sistema
 se encuentra organizada en patrones tanto de codificación como de modularizació
n.
 Sin embargo, estas técnicas se ven limitadas cuando las estructuras del
 sistema son conocidas en tiempo de ejecución.
 Es decir, cuando la determinación del componente responsable de un aspecto
 en particular es realizada en tiempo de ejecución (por ejemplo, clases
 cargadas dinámicamente en los sistemas orientados a objetos).
 En efecto, determinar la configuración arquitectónica real de un sistema
 usando análisis estático es, en general, es indecidible.
\end_layout

\begin_layout Standard
Además, ninguno de estos enfoques ha considerado las extracciones de 
\emph on
paths
\emph default
 de ejecución para generar diagramas tales como los UCMs.
\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:El-enfoque-DRArch"

\end_inset

Tesis
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX - Hay una mezcla entre el enfoque y el tool.
 Yo diria que separen el enfoque y despues hablen de la forma en que el
 tool soporta el enfoque.
 Es decir, las ventanitas del tool no debieran ir durante la especificación
 del enfoque.
\end_layout

\begin_layout Standard
Las subsecciones del enfoque debe mostrar aspectos conceptual.
 Si quieren puede poner una subsección que diga algo com o: 
\begin_inset Quotes sld
\end_inset

Recorrido por la Herramienta DrArch
\begin_inset Quotes srd
\end_inset

 y ahi muestran las caracteristicas visuales de la herramienta y las relacionan
 con el enfoque.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este capítulo se presenta el enfoque 
\emph on
DRArch
\emph default
, que propone la creación de una he\SpecialChar \-
rra\SpecialChar \-
mien\SpecialChar \-
ta de soporte para la reconstrucción
 de arquitecturas de software, usando para ello información estática (código
 fuente) y dinámica (
\emph on
logs
\emph default
 de ejecución) para lograr una representación arquitectónica por medio de
 diagramas de componentes y de UCMs.
\end_layout

\begin_layout Standard
El resto del capítulo se encuentra organizado de la siguiente forma.
 En la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Análisis"

\end_inset

 se presenta un breve 
\emph on
análisis
\emph default
 del problema y de los trabajos relacionados que dieron origen al conjunto
 de requerimientos para la creación de 
\emph on
DRArch
\emph default
.
 Luego, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Ejemplo:-Observer-Observable"

\end_inset

 se muestra un ejemplo concreto para poder comprender el funcionamiento
 de 
\emph on
DRArch
\emph default
.
 La sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Modelo-Conceptual"

\end_inset

 presenta el 
\emph on
modelo conceptual
\emph default
 de 
\emph on
DRArch
\emph default
, junto con una breve descripción de cada uno de los elementos que interactúan
 para alcanzar la funcionalidad propuesta.
 Finalmente, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Conclusiones-Cap4"

\end_inset

 se presentan las conclusiones del capítulo.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Análisis"

\end_inset

Enfoque 
\emph on
DRArch
\end_layout

\begin_layout Standard
El objetivo principal de 
\emph on
DRArch
\emph default
 es realizar un análisis de toda la información relevante que se pueda recolecta
r de un sistema, generando como salida una representación arquitectónica
 por medio de diagramas de componentes y de UCMs.
 Como bien se detalló en el capítulo anterior, existen actualmente varios
 enfoques basados en reconstrucción de arquitecturas para tratar el problema
 que causa la falta de documentación arquitectónica.
 Si bien no se centran específicamente en la reconstrucción de comportamiento,
 
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-su análisis detallado de cada uno
\end_layout

\end_inset

 su análisis detallado de cada uno nos permitió detectar aspectos que colaboran
 en los mecanismos y abstracciones aplicables al caso de UCMs.
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-No se entiende
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Otro aspecto importante es que se tenga en cuenta la información que aporten
 aquellas personas que tengan conocimientos sobre el sistema durante el
 proceso de reconstrucción de la arquitectura.
 Por lo general, esta información es la mas difícil de incorporar ya que
 la semántica no es siempre la misma.
 Por ejemplo, un desarrollador sabe que existe una convención en donde todas
 las clases que tengan en su nombre el sufijo 
\emph on
Task
\emph default
, representan tareas del sistema, y se desea que ese conocimiento se incorpore
 en el proceso de reconstrucción.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
El análisis del problema en sí y de los trabajos relacionados puso a la
 luz algunas características que hacen difícil la incorporación de ciertos
 mecanismos dentro de un proceso de desarrollo de software.
 Para evitar estos inconvenientes, además de la reconstrucción de arquitecturas
 de software de UCM se plantearon los siguientes objetivos secundarios:
\end_layout

\begin_layout Itemize
Limitar la información requerida del usuario a UCMs, código fuente y mapeo
 responsabilidad-código.
 Toda información adicional deberá ser derivable a partir del análisis automátic
o de estos tres elementos dados como entrada.
\end_layout

\begin_layout Itemize
El uso de la herramienta no deberá imponer el uso de un lenguaje de programación
 de propósito específico, ni un estilo o un conjunto de convenciones de
 implementación en particular.
 De esta forma será posible la aplicación del enfoque a sistemas legados.
\end_layout

\begin_layout Itemize
Tampoco se deberá imponer un proceso demasiado estricto para la modificación
 tanto de la arquitectura como del código.
 Así, el desarrollador tendrá el control de cuándo y cómo sincronizar los
 UCMs con la implementación.
\end_layout

\begin_layout Standard
Como principales influencias para la concepción de 
\emph on
DRArch
\emph default
 se deben mencionar los trabajos de...
\end_layout

\begin_layout Standard
Si bien los objetivos del enfoque son distintos, el análisis de eventos
 de bajo nivel mediante instrumentación de código presentado en 
\begin_inset LatexCommand cite
key "DISCOTECT"

\end_inset

 fue un importante ejemplo de (a) cuánta información útil se puede extraer
 de la ejecución de una aplicación y (b) que la aplicación del enfoque no
 necesariamente debe requerir el uso de un lenguaje de programación para
 ese propósito específico.
\end_layout

\begin_layout Standard
Por otro lado, en 
\begin_inset LatexCommand cite
key "ALDRICH05"

\end_inset

 se plantea un modelo de actualización incremental en el que se supone un
 diseño arquitectónico y una implementación inicial.
 Éste enfoque, en contraste con la extracción completa de un nuevo modelo
 arquitectónico a partir del código, posee la ventaja de mantener el estilo
 de especificación del arquitecto, ya que modifica la especificación original
 solamente en las partes donde se producen divergencias con la implementación.
\end_layout

\begin_layout Standard
Finalmente, el trabajo presentado en 
\begin_inset LatexCommand cite
key "SCM05"

\end_inset

 ilustra las ventajas de integrar un enfoque para el tratamiento de erosión
 arquitectónica con sistemas de software con\SpecialChar \-
fi\SpecialChar \-
gu\SpecialChar \-
ra\SpecialChar \-
tion management.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Standard
sacar info del capitulo de trabajos relacionados!!!
\end_layout

\begin_layout Standard
enfoque descripción general mostrando componentes del enfoque.
 1 2 3 4 5 partes
\end_layout

\end_inset


\end_layout

\begin_layout Description
Modelo\InsetSpace ~
conceptual
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Este modelo conceptual deberia ir en la seccion enfoque DrArch y tambien
 el esquemático.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para lograr la funcionalidad propuesta, 
\emph on
DRArch 
\emph default
sigue un proceso iterativo en el cuál el arquitecto interactúa en pequeñas
 decisiones para ir especificando incrementalmente el modelo arquitectónico
 del sistema.
 Dicho modelo esta representado por una base de datos de conocimiento lo
 suficientemente flexible como para poder realizar consultas complejas de
 forma simple.
\begin_inset Note Note
status collapsed

\begin_layout Standard
En la programación lógica, se especifican las condiciones que satisfacen
 las soluciones, se deducen las soluciones a partir de las condiciones y
 el énfasis de todo está en qué problema resolver.
 El problema se describe especificando qué caracteriza a sus posibles soluciones.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Las iteraciones están representadas por las fases, las cuales realizan actualiza
ciones al modelo arquitectónico.
 De esta forma, el punto de comienzo de este proceso es la ejecución de
 la fase de recolección de información.
 A partir del código fuente recuperamos la información estática y mediante
 el análisis del sistema en ejecución extraemos la información dinámica
 que complementa el análisis estático.
 
\end_layout

\begin_layout Standard
Luego de la fase de recolección de información empiezan las fases de especializa
ción, las cuales van iterativa e incrementalmente modificando el modelo
 arquitectónico elevando en cada fase el nivel de abstracción y detalle.
 En estas fases, la herramienta sugiere un conjunto de modificaciones (reglas)
 a la descripción del modelo arquitectónico.
 Estas modificaciones representan cambios a diferentes partes de la representaci
ón actual del sistema que pueden involucrar tanto modificaciones de estructura
 como de escenario de comportamiento.
 A partir de estas sugerencias, el arquitecto decide cual de estas modificacione
s representan fielmente los conceptos arquitectónicos que se está intentando
 reconstruir como así también descartar todas las sugerencias porque no
 aportan información relevante al análisis.
 Adicionalmente, el arquitecto puede refinar la especificación representada
 por los diferentes diagramas aumentando el nivel de detalle, incorporando
 modificaciones o elementos que pueden aportar mayor nivel de detalle en
 sucesivas fases que utilizan el modelo transformado por la fase en curso.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
Este enfoque basado en fases (botton up) permite dividir el espacio de analisis
 (el sistema a recuperar) en unidades mas pequeñas para, en fases posteriores,
 ir incrementando el tamaño de este espacio como asi tambien componer los
 resultados de las fases ejecutadas anteriormente.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una forma de aumentar la especialización del análisis es la definición de
 una fase por aspecto del sistema.
 Se podrían reutilizar las fase para cada aspecto evaluado.
 En cada nuevo escenario se va incrementando el nivel de detalle aportado
 por cada fase, descubriendo así relaciones que tal vez en análisis anteriores
 (escenarios diferentes) no fueron descubiertos.
 Al termino de cada fase, se generan representaciones gráficas del modelo
 arquitectónico las cuales cubren dos aspectos fundamentales de la arquitectura
 del sistema: estructura (diagramas de Componentes) y comportamiento (UCMs).
 La figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Proceso-DRArch"

\end_inset

 muestra como funciona el proceso 
\emph on
DRArch
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/procesoDrarch.jpg
	lyxscale 30
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Proceso-DRArch"

\end_inset

Proceso 
\emph on
DRArch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
De esta manera, el proceso de recuperación será una tarea donde el enfoque
 sugerirá un conjunto de transformaciones arquitectónicas y el arquitecto
 del sistema analizará y decidirá cuales de estas transformaciones es la
 más adecuada.
\end_layout

\begin_layout Standard
La descripción del proceso define seis partes principales del enfoque: el
 análisis estático, análisis dinámico, un modelo de reglas, la identificación
 de estructuras arquitectónicas, el manejo de las alternativas arquitectónicas
 y la generación de vistas.
 En la figura\InsetSpace ~
 se muestra un diagrama esquemático de las partes del enfoque.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/EsquemaDrarch.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-Esquemático-del"

\end_inset

Diagrama Esquemático del enfoque 
\emph on
DRArch
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Aca debería ir un diagrama esquemático que explique el enfoque y las
 diferentes partes y luego cada subsección cuenta las diferentes partes
 por medio del ejemplo de la sección que sigue.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Con el objetivo de poder comprender el enfoque pragmáticamente, en la siguiente
 sub-sección se presenta un ejemplo simple de una pieza de un sistema, en
 donde se utiliza el patrón de diseño 
\emph on
Observer-Observable
\emph default
.
 El resto de las 
\emph on
sub
\emph default
-secciones describen cada una de las partes del enfoque que se muestran
 en el diagrama esquemático de la figura\InsetSpace ~
 haciendo referencia o agregando
 mas detalles al ejemplo.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sec:Ejemplo:-Observer-Observable"

\end_inset

Ejemplo: Observer-Observable
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Este ejemplo debería ir como subseccion del Enfoque
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se mencionó antes, una de las decisiones principales del enfoque 
\emph on
DRArch
\emph default
 ha sido centrarse en la reconstrucción de las vistas comportamentales de
 una arquitectura, en particular, especificadas como UCMs.
 Para ayudar a comprender el enfoque que se explica en este capítulo, volvemos
 al ejemplo de la Sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sub:Ejemplo-UCM"

\end_inset

, basado en un patrón 
\emph on
Observer-Observable
\emph default
 
\begin_inset LatexCommand cite
key "gamma93design"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
XXX-Yo usaria una aplicación por ejemplo la misma que juan y martin y sobre
 la cual especificaria el patron...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El patrón 
\emph on
Observer-Observable
\emph default
 se aplica en el contexto de aplicaciones interactivas que demandan un alto
 grado de interacción con el usuario.
 Estos sistemas normalmente requieren un alto grado de flexibilidad, en
 especial sobre la interfaz de usuario, que debe adaptarse a las necesidades,
 muchas veces conflictivas, de los diferentes usuarios.
 En particular, 
\emph on
Observer-Observable
\emph default
 apunta a satisfacer las siguientes necesidades:
\end_layout

\begin_layout Itemize
La misma información debe ser presentada de manera diferente
\end_layout

\begin_layout Itemize
La representación gráfica y el comportamiento de la aplicación debe reflejar
 la manipulación de datos inmediatamente
\end_layout

\begin_layout Itemize
Cambios en la interfaz de usuario deben ser fáciles de introducir, incluso,
 en tiempo de ejecución
\end_layout

\begin_layout Itemize
El núcleo de la aplicación (
\emph on
Observable
\emph default
) debe verse inalterado por el cambio de estilos o interfaces gráficas
\end_layout

\begin_layout Standard
En el estilo 
\emph on
Observer-Observable
\emph default
 puro, normalmente el 
\emph on
Observable
\emph default
 representa los datos a ser mostrados, y el 
\emph on
Observer
\emph default
 (la vista) es responsable de reflejarlos visualmente al usuario.
\end_layout

\begin_layout Standard
En la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Diagrama-de-clases-UML-para-el-ejemplo-Observer-Observable"

\end_inset

 se presenta un diagrama de clases UML en donde una aplicación sencilla
 utiliza el patrón 
\emph on
Observer-Observable
\emph default
 y en Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Diagrama-de-componentes"

\end_inset

 se presenta un diagrama con los dos componentes principales de este patrón
 arquitectónico, detallando en cada uno de ellos las responsabilidades asociadas
:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/observerObservableClassDiagram.JPG
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-clases-UML-para-el-ejemplo-Observer-Observable"

\end_inset

Diagrama de clases UML para el ejemplo 
\emph on
Observer-Observable
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserverObservableComponentDiagram.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-componentes"

\end_inset

Diagrama de componentes para el ejemplo 
\emph on
Observer-Observable
\begin_inset Note Note
status collapsed

\begin_layout Standard

\emph on
XXX-Indicar en el diagramas de componentes los puertos e interfaces y relaciones
 entre puerto e interfaces..
 en el diagrama se tiene que especificar tambien una nota para las responsabilda
des.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
Observable
\emph default
 Representa los datos y la funcionalidad principal de la aplicación.
 Provee un mecanismo para registrar los observadores.
 De este modo, permite la notificación de los cambios sufridos manteniendo
 la independencia del modelo con sus diferentes vistas.
\end_layout

\begin_layout Description

\emph on
Observer
\emph default
 Provee información al usuario de manera visual y obtiene información del
 usuario mediante eventos (por ejemplo, 
\emph on
clicks
\emph default
 o movimientos de 
\emph on
mouse
\emph default
, teclas, etc.).
 Obtiene sus datos del modelo.
\end_layout

\begin_layout Subsubsection
Mapeo UCM - implementación
\end_layout

\begin_layout Standard
Antes de proseguir con el ejemplo 
\emph on
Observer-Observable
\emph default
 es importante introducir el concepto de mapeo entre la documentación arquitectó
nica y su correspondiente implementación.
\end_layout

\begin_layout Standard
Como se explicó en la sección 
\begin_inset LatexCommand ref
reference "sub:Ejemplo-UCM"

\end_inset

, el comportamiento especificado a nivel arquitectónico toma distancia de
 los detalles de interacción como las llamadas o mensajes entre componentes.
 En el lenguaje UCM, el comportamiento se representa en términos secuencias
 causa-efecto entre 
\emph on
responsabilidades
\emph default
 de los componentes.
 Las 
\emph on
responsabilidades
\emph default
 pueden ser de mayor granularidad que las llamadas y mensajes para reducir
 el nivel de compromiso con los detalles, por este motivo, una 
\emph on
responsabilidad
\emph default
 (función de la que es responsable un componente) puede ser materializada
 por varios métodos e incluso clases de objeto a nivel implementación.
 Por otro lado, una misma clase o un método particular de ésta puede contribuir
 con la materialización de diferentes 
\emph on
responsabilidades
\emph default
.
\end_layout

\begin_layout Standard
En otras palabras, existe una correspondencia de aridad 
\family typewriter
n:m
\family default
 entre una unidad de comportamiento a nivel arquitectónico, como lo es una
 
\emph on
responsabilidad
\emph default
 UCM, y una unidad de comportamiento a nivel implementación, como lo son
 los métodos de una clase.
 Tal relación se denomina mapeo 
\emph on
responsabilidad
\emph default
 - 
\emph on
código
\emph default
.
 El mapeo permite la trazabilidad entre la 
\emph on
responsabilidad
\emph default
 UCM de un componente y su implementación.
\end_layout

\begin_layout Standard
En la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Mapeos-clase-componente"

\end_inset

 y la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:fig:Mapeos-método-responsabilidad"

\end_inset

 se muestra la correspondencia de la documentación arquitectónica del caso
 de referencia y su implementación en Java mediante tales mapeos.
 Si bien en este ejemplo las correspondencias clase-componente y método-responsa
bilidad son directas, es posible especificar casos más complejos.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserverObservableMappingClass.jpg
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Mapeos-clase-componente"

\end_inset

Mapeos clase - componente
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserverObservableMappingMethod.jpg
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:fig:Mapeos-método-responsabilidad"

\end_inset

Mapeos método - responsabilidad
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Análisis de información de artefactos de código fuente
\end_layout

\begin_layout Standard
Se debe realizar un análisis de los artefactos relacionados con el código
 fuente para poder capturar los aspectos estructurales del sistema.
 Dicho análisis requiere que el código fuente sea fácilmente navegable para
 poder ir recolectando información relevante.
 Con el objetivo de poder manipular la información estática de forma flexible,
 el código fuente es representado por medio de un lenguaje de programación
 lógico al estilo 
\emph on
ProLog
\emph default
.
 De esta forma, se representan artefactos del código fuente (clases, variables,
 paquetes, etc.) sobre una base de conocimiento.
 Esto nos permíte mantener un contexto en el cual sea posible encontrar
 información relacionada de forma sencilla ya que buscando directamente
 en el código fuente resultaría casi imposible.
\end_layout

\begin_layout Standard
Esta transformación es realizada al comienzo del proceso de reconstrucción
 por medio de un motor de programación lógica.
 Una vez que el código fuente esta representado en forma de hechos, es posible
 realizar consultas para obtener información de forma simple y flexible.
 La flexibilidad de este enfoque permite explorar un gran abanico de relaciones
 y consultas diferentes.
\end_layout

\begin_layout Standard
Por ejemplo, si se considera un esenario en donde un desarrollador quiere
 reutilizar una parte en particular del código de una aplicación porque
 contiene funcionalidad que necesita en otra aplicación que esta desarrollando,
 dicho desarrollador debería realizar una búsqueda por todo el código fuente
 para poder capturar las partes del código que necesita.
 Inspeccionar directamente en el código fuente sería muy tedioso y llevaría
 mucho tiempo, pero si el código fuente esta representado en forma de hechos
 
\emph on
ProLog
\emph default
, seria sencillo realizar algunas consultas para identificar partes del
 código.
\end_layout

\begin_layout Standard
En el ejemplo de la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Ejemplo:-Observer-Observable"

\end_inset

, todas las clases, interface, propiedades, etc.
 estarían representadas con hechos 
\emph on
ProLog
\emph default
, por ejemplo, la clase 
\family typewriter
UserModel
\family default
 queda representada de la siguiente forma: 
\family typewriter
class(UserModel)
\family default
.
\end_layout

\begin_layout Subsection
Análisis dinámico
\end_layout

\begin_layout Standard
Al igual que la información estática, la información dinámica es representada
 en forma de hechos al estilo 
\emph on
ProLog
\emph default
 y sobre la misma base del conocimiento.
 Para obtener dicha información, primero se debe instrumentar la aplicación
 para poder generar logs de ejecución.
 Luego, es necesario realizar un análisis de los 
\emph on
logs
\emph default
 de ejecución del sistema.
 Los 
\emph on
logs
\emph default
 de ejecución representan las trazas reales de ejecución de la aplicación
 en su estado actual.
 Contienen información de bajo nivel, como llamadas a métodos, threads,
 creaciones de objetos, etc.
\end_layout

\begin_layout Standard
Para generar de los 
\emph on
logs
\emph default
 de ejecución, es necesario instrumentar la aplicación y realizar ejecuciones
 sobre casos de uso que reflejen el comportamiento del sistema.
 En este punto es imprescindible la intervención manual del arquitecto ya
 que es necesario guiar la ejecución de la aplicación, interactuando con
 ella de manera que se ejercite los casos de uso en donde los artefactos
 que se quieren reconstruir tengan participación dentro de la ejecución.
\end_layout

\begin_layout Standard
Los hechos generados por el análisis dinámico, se almacenan en la base de
 conocimientos junto con el resto de la información para que las consultas
 que se realicen puedan relacionar tanto información estática como dinámica.
 Adicionalmente, es posible relacionar información del modelo que incrementalmen
te se está generando y la información aportada por experiencia y el conocimiento
 de las personas involucradas en el proceso de reconstrucción.
\end_layout

\begin_layout Standard
En el ejemplo de la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Ejemplo:-Observer-Observable"

\end_inset

, el análisis del log tiene como salida todas las llamadas a métodos formando
 
\emph on
paths
\emph default
 de ejecución.
 La ejecución del método 
\family typewriter
notifyAllObservers
\family default
 queda representado de la siguiente forma:  
\family typewriter
executedMethod(1, UserModel.notifyAllObservers, void, null).
\family default
En donde el primer argumento es el orden de ejecución, el segundo, el método
 ejecutado, el tercero el tipo de retorno y el cuarto, el valor de retorno.
\end_layout

\begin_layout Subsection
Reglas para la identificación de artefactos arquitectónicos
\end_layout

\begin_layout Standard
Las iteraciones están representadas por las fases las cuales realizan actualizac
iones al modelo arquitectónico.
 Cada fase recibe como entrada un 
\emph on
snapshot
\emph default
 del modelo recuperado por fases anteriores y produce como salida una evolución
 del modelo de entrada en base a las transformaciones aplicadas durante
 la ejecución de la fase.
 De esta forma una fase se convierte en un componente customizable y reutilizabl
e el cual es independiente del modelo arquitectónico de entrada.
\end_layout

\begin_layout Standard
La ejecución de cada fase es a su vez, es un proceso interactivo.
 Cada fase contiene un conjunto de reglas las cuales determinan las transformaci
ones al modelo.
 Estas transformaciones permitirán al arquitecto relacionar elementos arquitectó
nicos (ej.: componentes, relaciones entre componentes, etc.) a diferentes
 estructuras de código (ej.: clases, métodos, etc).
 Cada regla consta de tres partes: 
\end_layout

\begin_layout Enumerate
una consulta sobre la base de conocimiento; 
\end_layout

\begin_layout Enumerate
una sugerencia, construida a partir de cada uno de los resultados de la
 consulta;
\end_layout

\begin_layout Enumerate
una serie de hechos (
\emph on
facts
\emph default
), los cuales representan las transformaciones a la base de conocimiento.
\end_layout

\begin_layout Subsubsection
Especificando reglas
\end_layout

\begin_layout Standard
El enfoque provee un conjunto de reglas basadas en patrones de diseño y
 en un análisis realizado sobre diversos sistemas.
 De esta forma, se intentó detectar cuales son los requerimientos que debe
 cumplir un sistema para que se justifique la presencia de un determinado
 artefacto arquitectónico.
 Por ejemplo, una regla puede detectar la presencia de un componente del
 tipo 
\emph on
Observer
\emph default
 y su justificación sería que existe una clase que implementa la interface
 
\emph on
Observer
\emph default
.
\end_layout

\begin_layout Standard
Adicionalmente, las reglas pueden ser especificadas por el arquitecto que
 realiza el proceso de reconstrucción.
 Las reglas incorporadas por el arquitecto pueden ser utilizadas en cualquiera
 de las fase del proceso de reconstrucción.
\end_layout

\begin_layout Subsection
Identificación de estructuras arquitectónicas
\end_layout

\begin_layout Standard
En el ejemplo 
\emph on
Observer-Observable
\emph default
, las reglas que identifican estructuras arquitectónicas son simples.
 Por ejemplo, una clase que implementa la interface 
\emph on
Observer
\emph default
 se mapea a un componente arquitectónico.
 Si bien esto se define como una regla, durante el proceso de reconstrucción
 esta regla se presenta como sugerencia y es responsabilidad del arquitecto
 aceptar o refutar la generación un nuevo componente.
\end_layout

\begin_layout Standard
Existen reglas mas complejas que ayudan a identificar estructuras arquitectónica
s relacionando distintos tipos de información.
 Las siguientes descripciones de reglas dan una idea la información que
 se relaciona para detectar estructuras arquitectónicas:
\end_layout

\begin_layout Subsubsection
Estructura De Paquetes 
\end_layout

\begin_layout Standard
Cualquier sistema grande se debe dividir en unidades más pequeñas, de modo
 que las personas puedan trabajar con una cantidad de información limitada,
 a la vez y de modo que los equipos de trabajo no interfieran con el trabajo
 de los otros.
 Un paquete es una parte de un modelo.
 Cada parte del modelo debe pertenecer a un paquete.
 Pero para ser funcional, la asignación debe seguir un cierto principio
 racional, tal como funcionalidad común, implementación relacionada y punto
 de vista común.
 UML no impone una regla para componer los paquetes.
 Los paquetes ofrecen un mecanismo general para la organización de los modelos/s
ubsistemas agrupando elementos de modelado.
 Cada paquete corresponde a un submodelo (subsistema) del modelo (sistema).
 Los paquetes son unidades de organización jerárquica de uso general de
 los modelos de UML.
 Pueden ser utilizados para el almacenamiento, el control de acceso, la
 gestión de la configuración y la construcción de bibliotecas que contengan
 fragmentos reutilizables del modelo.
 Un paquete puede contener otros paquetes, sin límite de anidamiento pero
 cada elemento pertenece a (está definido en) sólo un paquete.
 Los paquetes contienen elementos del modelo al más alto nivel tales como
 clases y sus relaciones, máquinas de estado, diagramas de casos de uso,
 interacciones y colaboraciones; atributos, operaciones, estados, líneas
 de vida y mensajes están contenidos en otros elementos y no aparecen como
 contenido directo de los paquetes.
 Una clase de un paquete puede aparecer en otro paquete por la importación
 a través de una relación de dependencia entre paquetes.
 Todas las clases no son necesariamente visibles desde el exterior del paquete,
 es decir, un paquete encapsula a la vez que agrupa.
 En general, un paquete no puede tener acceso al contenido de otro paquete.
 Los paquetes son opacos, a menos que sean abiertos por una dependencia
 de acceso o de importación.
 La dependencia de acceso indica que el contenido del paquete del proveedor
 puede aparecer en referencias efectuadas por los elementos del paquete
 cliente.
 En general, un paquete puede ver solamente los elementos de otros paquetes
 que tienen visibilidad pública.
 Los elementos con visibilidad protegida pueden ser vistos únicamente por
 los paquetes que son descendientes del paquete contenedor de dichos elementos.
 Los elementos con visibilidad privada sólo son vistos por su paquete contenedor
 y anidados.
 La visibilidad también se aplica a las clases.
 El permiso de acceso y visibilidad son necesarios para hacer referencia
 a un elemento.
 La dependencia de acceso no modifica el espacio de nombres del cliente
 no crea las referencias automáticamente, simplemente concede permiso para
 establecer referencias.
 La dependencia de importación se utiliza para agregar nombres al espacio
 de nombres del paquete del cliente como sinónimos de los caminos completos.
\end_layout

\begin_layout Subsubsection

\emph on
Fan-in / Fan-out
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
agregar info y cambiar el titulo!
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\emph on
Hot Spot
\emph default
 y 
\emph on
Frameworks
\end_layout

\begin_layout Standard
El concepto principal del diseño de 
\emph on
frameworks
\emph default
 es el de separar aquellos aspectos que son invariantes a lo largo de varias
 aplicaciones en el dominio (
\emph on
frozen spots
\emph default
) de aquellos otros que varían a los largo de las aplicaciones y que deben
 mantenerse flexibles y customizables (
\emph on
hot spots
\emph default
).
 Los conceptos de herencia y 
\emph on
binding
\emph default
 dinámico son las claves para llevar a cabo esto.
 Los 
\emph on
frameworks
\emph default
 proveen su flexibilidad en los 
\emph on
hot spots
\emph default
 usando dos conceptos esenciales: 
\emph on
templates
\emph default
 y 
\emph on
hooks
\emph default
.
 Los métodos 
\emph on
template
\emph default
 son implementados basados sobre los métodos 
\emph on
hook
\emph default
.
 Un método 
\emph on
hook
\emph default
 en un método elemental en el contexto en el que el 
\emph on
hook
\emph default
 particular es usado (este puede ser tanto un método abstracto, un método
 regular u otro método 
\emph on
template
\emph default
).
 
\end_layout

\begin_layout Standard
Generalmente, los métodos 
\emph on
template
\emph default
 son usados para implementar los 
\emph on
frozen spots
\emph default
 en un 
\emph on
framework
\emph default
, y los métodos 
\emph on
hook
\emph default
, los 
\emph on
hot spots
\emph default
.
 Los 
\emph on
frozen spots
\emph default
 son aspectos que son invariantes a lo largo de las aplicaciones en el dominio,
 posiblemente representando comportamiento abstracto, flujos de control
 genéricos y relaciones comunes entre objetos.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/Hooks-Templates.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Hooks-y-Templates"

\end_inset


\emph on
Hooks
\emph default
 y 
\emph on
Templates
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Hooks-y-Templates"

\end_inset

 es un ejemplo en el que la clase 
\family typewriter
B
\family default
 tiene 3 métodos: 
\family typewriter
M1
\family default
, es el método template que invoca a 
\family typewriter
M2
\family default
 y 
\family typewriter
M3
\family default
; 
\family typewriter
M2
\family default
 es declarado abstracto, y 
\family typewriter
M3
\family default
 ofrece una implementación por defecto.
 
\end_layout

\begin_layout Standard
En base a esto, decidimos utilizar esta estrategia para identificar componentes
 arquitectónicos.
 En primer lugar identificamos los métodos 
\emph on
hook
\emph default
, y a partir de esto se abren dos posibilidades.
 
\end_layout

\begin_layout Itemize
La primera, si el método 
\emph on
hook
\emph default
 es invocado desde otra jerarquía, es decir, la clase que contiene el método
 
\emph on
hook
\emph default
, no es subclase de la clase que declara el método template que lo invoca,
 se seleccionan dichas clases como posibles componentes, y se recupera también
 la relación, en la que la clase 
\emph on
hook
\emph default
 provee un servicio y la clase 
\emph on
template
\emph default
 lo consume (Sección B de la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Hot-Spot-y-Frameworks"

\end_inset

).
\end_layout

\begin_layout Itemize
La segunda, si la clase 
\emph on
hook
\emph default
, es subclase de la clase 
\emph on
template
\emph default
, de esta forma se busca quién invoca al método 
\emph on
template
\emph default
.
 Y se procede a lo mismo que la anterior: se seleccionan como posibles component
es y se recupera la relación (Sección A de la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Hot-Spot-y-Frameworks"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/HotSpot-Frameworks.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard

\emph on
\begin_inset LatexCommand label
name "fig:Hot-Spot-y-Frameworks"

\end_inset

Hot Spot
\emph default
 y 
\emph on
Frameworks
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Manipulación de alternativas arquitectónicas
\end_layout

\begin_layout Standard
La ejecución de una regla tiene como resultado una lista de sugerencias.
 Estas sugerencias proponen cambios al modelo arquitectónico y deben ser
 aceptadas o rechazadas por el arquitecto.
 Esto permite que las actualizaciones arquitectónicas sean controladas.
 
\end_layout

\begin_layout Standard
Una sugerencia es el resultado de evaluar una de las reglas disponibles
 sobre la base del conocimiento.
 La importancia de estas decisiones de diseño varía para cada sistema de
 software y está en función de los interesados en el sistema, sus preocupaciones
, y sus necesidades específicas.
 Por ejemplo, es posible que una sugerencia proponga la creación de uno
 de los componentes mas importantes del sistema, pero el arquitecto no desea
 mostrar ese componente en la vista que esta trabajando, ya que no esta
 interesado en ese aspecto del sistema.
 En ese caso, el arquitecto decide rechazar la sugerencia y continuar analizando
 el resto de las sugerencias.
\end_layout

\begin_layout Standard
De esta forma, aceptar o rechazar una sugerencia se convierte en una decisión
 de la arquitectura.
 Las decisiones de la arquitectura se concentran en lo que es esencial en
 un sistema.
 Estas elecciones pueden incluir estructura, organización, funcionalidad,
 comportamiento, o más propiedades no funcionales como la usabilidad, flexibilid
ad, seguridad, etc.
\end_layout

\begin_layout Subsection
Generación de Vistas
\end_layout

\begin_layout Standard
Al termino de cada fase, se cuenta cuenta con una representación gráfica
 del modelo arquitectónico la cual cubre dos aspectos fundamentales de la
 arquitectura del sistema: estructura y comportamiento.
 Las sugerencias aceptadas de las reglas que fueron ejecutadas, agregaron
 hechos a la base de conocimiento.
 Los hechos agregados representas aspectos del sistema de alto nivel, y
 son interpretados como tales para generar vistas que permitan mostrar la
 arquitectura del sistema.
 Cuando un conjunto de reglas finaliza su ejecución, se generan diagramas
 de componentes y de UCMs con su correspondiente mapeo al código fuente.
 Estos diagramas están representados en 
\emph on
FLAbot
\emph default
.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
The architecture of Drarch is based on three major components: RuleModel,
 RuleEngine, PhaseEngine.
 The RuleModel as it name describe, defines a model of rules.
 Each Rule is composed with a Prolog query, a list of Vars for which we
 are interested in its values, a Suggest template in natural language which
 is going to be filled with the values of the vars for each query result,
 and a Fact set to be generated and added to the knowledge base if the suggest
 is accepted.[ref a la figura]
\end_layout

\begin_layout Standard
The RuleModel component is build on EMF framework.
 EMF is a Java framework and code generation facility for building tools
 and other applications based on a structured model.
 Once you specify an EMF model, the EMF generator can create a corresponding
 set of Java implementation classes.
 You can edit these generated classes to add methods and instance variables
 and still regenerate from the model as needed: your additions will be preserved
 during the regeneration.
 If the code you added depends on something that you changed in the model,
 you will still need to update the code to reflect those changes; otherwise,
 your code is completely unaffected by model changes and regeneration.
 In addition to simply increasing your productivity, building your application
 using EMF provides several other benefits like model change notification,
 persistence support including default XMI and schema-based XML serialization,
 a framework for model validation, and a very efficient reflective API for
 manipulating EMF objects generically.
 Most important of all, EMF provides the foundation for interoperability
 with other EMF-based tools and applications.
 It provides wizards and a visual editor for the creation and edition of
 the rules.
 RuleEngine
\end_layout

\begin_layout Standard
The RuleEngine component is an abstraction of the underlay inference engine.
 It's in charge of the execution of the query rules and the instantiation
 of the suggest template with each result of the query execution.
 After the user accepts the suggests it is the responsible for the generation
 of the new facts and the addition of those to the knowledge base.
 JQuery has been selected as the query language for Drarch.
 The JQuery query language is a logic (Prolog-like) query language based
 on TyRuBa.
 TyRuBa is a logic programming language implemented in Java.
 The JQuery query language is defined as a set of TyRuBa predicates which
 operate on facts generated from the Eclipse JDT's abstract syntax tree.
 These facts, derived from AST represent the static structure of the system.
 To analyze the system in execution was used of the FLABot project, which
 instruments the code of the system and selected events are logged.
 The resulting log is then analyzed and new facts are generated and incorporated
 into the knowledge base.
 
\end_layout

\begin_layout Standard
StepEngine
\end_layout

\begin_layout Standard
The Step Engine defines a phase model as a composition of steps, in which
 the execution of one phase is determined by the performance of each of
 the steps which it is composed.
 In turn, each step corresponds to a rule defined by the RuleModel component.
 The phases are divided into two groups according to how they interact with
 the user.
 The interactive phases, executes each step and at the end of this execution,
 suggests resulting from the execution of the corresponding rule, are presented
 to the user.
 Here is responsibility of the user to choose those suggestions that best
 represent the system being analyzed.
 At this point you decide whether continuing with the following rule, or
 stops the execution of phase.
 The non-interactive phases on the other hand, do not have the user intermediate
 outcomes, these are all accepted by default and the stage is executed in
 its entirety.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modelar o capturar las decisiones de diseño arquitectónico está estrechamente
 ligado con la visualización arquitectónica y con la forma en que las decisiones
 de diseño son representadas y manipuladas por los interesados.
 Cada visualización tiene diferentes ventajas y desventajas que un arquitecto
 debe considerar.
\end_layout

\begin_layout Standard
Una vez que la vista es generada, el arquitecto pude realizar modificaciones
 sobre los diagramas.
 Las modificaciones realizadas son sincronizadas con la base de conocimiento
 para reflejar los cambios.
\end_layout

\begin_layout Standard
Es importante destacar que los componentes pueden estar mapeados al código
 fuente de forma explícita.
 Es decir, existe una relación que vincula a la clase 
\family typewriter
UserInterface
\family default
 con el componente 
\family typewriter
UserInterfaceObserver
\family default
 de la figuras 
\begin_inset LatexCommand ref
reference "fig:Diagrama-de-clases-UML-para-el-ejemplo-Observer-Observable"

\end_inset

 y 
\begin_inset LatexCommand ref
reference "fig:Diagrama-de-componentes-de-los-Observers"

\end_inset

.
 
\end_layout

\begin_layout Section
Recorrido por la Herramienta 
\emph on
DRArch
\end_layout

\begin_layout Standard
En esta sección se muestra cómo hace la herramienta 
\emph on
DRArch
\emph default
 para satisfacer las necesidades del enfoque mencionado, siguiendo el ejemplo
 de la sección 
\begin_inset LatexCommand ref
reference "sec:Ejemplo"

\end_inset

.
 Como primer paso, el arquitecto debe definir qué reglas se van a incluir
 en la fase que se quiere ejecutar.
 Cada fase debería tener un objetivo claro, por ejemplo, una fase podría
 enfocarse en descubrir si existen implementaciones del patrón 
\emph on
Observer-Observable
\emph default
 o de algún otro patrón de diseño.
\end_layout

\begin_layout Standard
En el 
\series bold
análisis estático
\series default
, una porción del código fuente correspondiente al ejemplo 
\emph on
Observer-Observable
\emph default
, se transforma a la representación que se detalla en la figura 
\begin_inset LatexCommand ref
reference "fig:Ejemplo-de-la-representación-del-código-fuente"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/java2jquery.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Ejemplo-de-la-representación-del-código-fuente"

\end_inset

Ejemplo de la representación del código fuente
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el 
\series bold
análisis dinámico
\series default
, el 
\emph on
log
\emph default
 de ejecución generado por la combinación de las herramientas 
\emph on
DRArch
\emph default
 y 
\emph on
FLAbot
\emph default
, es analizad por el componente TraceLog Analizer para generar los hechos
 ProLog correspondientes al 
\emph on
log
\emph default
 de ejecución.
 De esta forma, en la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Observer-Observable-TraceLog"

\end_inset

 se muestran los hechos correspondientes al ejemplo 
\emph on
Observer-Observable
\emph default
 que se generan luego de analizar el 
\emph on
log
\emph default
 de ejecución.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserverObservableTraceLog.jpg
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Observer-Observable-TraceLog"

\end_inset

Transformación del 
\emph on
log
\emph default
 de ejecución del ejemplo 
\emph on
Observer-Observable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Siguiendo con el 
\series bold
modelo de reglas
\series default
, la herramienta 
\emph on
DRArch
\emph default
 presenta una interface de usuario para la especificación de reglas (crear,
 editar y borrar reglas).
 En la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Especificando-Reglas"

\end_inset

 se muestra un 
\emph on
screenshot
\emph default
 de la pantalla con las tres partes mas importantes de la especificación
 de una regla: la consulta, la sugerencia que genera la ejecución de la
 consulta, y los hechos que se deben agregar a la base de conocimientos
 en el caso de que el arquitecto decida aceptar la sugerencia durante el
 proceso de reconstrucción.
 En la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:JQuery"

\end_inset

 del apéndice se encuentra un catálogo completo de los hechos disponibles
 junto con una descripción (en la herramienta es posible acceder a dicho
 catálogo a través de la ayuda).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserverObservableRule.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Especificando-Reglas"

\end_inset

Especificación de una regla para el ejemplo 
\emph on
Observer-Observable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para reflejar la toma de decisiones y poder
\series bold
 manipular las propuestas arquitectónicas
\series default
, la herramienta expone dicha funcionalidad por medio de 
\emph on
chekboxes
\emph default
 que indican si la sugerencia se acepta o se rechaza.
 Siguiendo con el ejemplo del 
\emph on
Observer-Observable
\emph default
, en la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Vista-de-sugerencias"

\end_inset

 se muestra la vista de sugerencias para la regla que detecta componentes
 
\emph on
Observer.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/DrarchSuggestView.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Vista-de-sugerencias"

\end_inset

Vista de sugerencias
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finalmente, para la 
\series bold
generación de vistas
\series default
, si las sugerencias de la regla especificada en el ejemplo\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Especificando-Reglas"

\end_inset

 son aceptadas, el proceso de reconstrucción genera el diagrama de la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Diagrama-de-componentes-de-los-Observers"

\end_inset

.
 Luego de que la herramienta actualice las vistas de la representación arquitect
ónica, el arquitecto tiene la posibilidad de modificar los diagramas desde
 el editor gráfico.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ObserversComponentDiagram.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-componentes-de-los-Observers"

\end_inset

Diagrama de componentes de los 
\emph on
Observers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El recorrido mencionado en este apartado es un ejemplo simple de una iteración
 en donde se puede observar la intervención del arquitecto en el momento
 de tomar las decisiones que modifican el modelo arquitectónico.
 Las iteraciones terminan cuando ya no quedan más reglas dentro de la fase
 que actualmente se esté ejecutando.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Conclusiones-Cap4"

\end_inset

Conclusiones
\end_layout

\begin_layout Standard
En este capitulo se presentó el enfoque 
\emph on
DRArch
\emph default
, que permite obtener vistas arquitectónicas de un sistema a partir de un
 proceso guiado por el arquitecto.
 Este proceso intenta utilizar la mayor cantidad de información que sea
 posible y sus principales fuentes son: el código, la trazas de ejecución
 y la experiencia de las personas involucradas en el sistema.
\end_layout

\begin_layout Standard
El proceso de reconstrucción es controlado por el arquitecto en todo momento.
 Su modelo flexible de generación de reglas permite al arquitecto tener
 el control de cuándo y cómo actualizar el modelo arquitectónico.
\end_layout

\begin_layout Standard
Por otro lado, 
\emph on
DRArch
\emph default
 no impone restricciones de un lenguaje específico en el que este implementado
 el sistema a analizar.
 El hecho de transformar la información del sistema a una base de conocimientos
 permite la aplicación del enfoque en muchos sistemas existentes.
\end_layout

\begin_layout Standard
Debemos admitir que no existe la magia, es decir, es imposible, desde nuestro
 punto de vista, que una herramienta pueda recuperar, sin ayuda alguna,
 el diseño arquitectónico de un sistema.
 Se necesita del conocimiento del dominio de la aplicación y fundamentalmente
 de la experiencia del usuario.
 Utilizando el enfoque 
\emph on
DRArch
\emph default
, es posible alcanzar una aproximación de la arquitectura.
 Uno de los aspectos más fuerte del enfoque es que permite especificar cualquier
 tipo de información del sistema para luego ser procesada (consultas a través
 de reglas) y relacionar cualquier tipo de información.
\end_layout

\begin_layout Standard
Adicionalmente, es posible extender la funcionalidad para que la enfoque
 brinde soporte para algunos de los siguientes ítems: 
\end_layout

\begin_layout Itemize
Identificar patrones de diseño.
 
\end_layout

\begin_layout Itemize
Definir un conjunto de reglas que verifiquen si el diseño propuesto se correspon
de con la implementación.
 
\end_layout

\begin_layout Itemize
Detectar anti-patrones.
\end_layout

\begin_layout Standard
En el siguiente capítulo se muestran en detalle algunos aspectos de la implement
ación.
\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:Implementación"

\end_inset

Diseño e implementación
\end_layout

\begin_layout Standard
El presente capítulo está dedicado a la descripción del diseño e implementación
 de 
\emph on
DRArch
\emph default
.
 Para ello, su estructura y funcionamiento serán descriptos mediante diagramas
 de paquetes y de descomposición de módulos a nivel arquitectónico y, a
 nivel de diseño detallado, mediante diagramas de clases y de interacción
 en notación UML (
\emph on
Uniﬁed Modeling Language
\emph default
) 
\begin_inset LatexCommand cite
key "BURKHARDT97"

\end_inset

, presentando los aspectos más importantes de su implementación.
 
\end_layout

\begin_layout Standard
El resto del capítulo se encuentra organizado de la siguiente manera.
 En la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Arquitectura"

\end_inset

 se presenta la arquitectura de 
\emph on
DRArch
\emph default
.
 Luego, en las secciones\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Query-Engine"

\end_inset

, 
\begin_inset LatexCommand ref
reference "sec:Rule-Model"

\end_inset

, 
\begin_inset LatexCommand ref
reference "sec:Phase-Engine"

\end_inset

 y 
\begin_inset LatexCommand ref
reference "sec:TraceLog-Analyzer"

\end_inset

 se explican en detalle cómo fueron diseñados e implementados los componentes
 
\emph on
Query Engine
\emph default
, 
\emph on
Rule Model, Phase Engine, 
\emph default
y 
\emph on
TraceLog Analyzer
\emph default
, respectivamente.
 Finalmente, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Conclusiones"

\end_inset

 se presentan las conclusiones del capítulo.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Arquitectura"

\end_inset

Arquitectura
\end_layout

\begin_layout Standard

\emph on
DRArch
\emph default
 fue implementado como un plug-in de la plataforma Eclipse, aprovechando
 su arquitectura extensible, su modelo para análisis estático de código
 fuente Java y su framework de interfaz de usuario.
 Además, esto permitió aprovechar el editor gráﬁco de UCMs y el instrumentador
 de 
\emph on
bytecode
\emph default
 del proyecto 
\emph on
FLABot
\emph default
, ya que ambos también fueron implementados como plug-ins.
 Si bien 
\emph on
JQuery
\emph default
 también ha sido desarrollado como plug-in, en este trabajo se utilizo a
 modo de librería.
 El diseño de 
\emph on
DRArch
\emph default
 está muy inﬂuenciado por la arquitectura ya deﬁnida por 
\emph on
Eclipse
\emph default
.
 Esencialmente, 
\emph on
Eclipse
\emph default
 (ver Apéndice\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Plataforma-Eclipse"

\end_inset

) es una plataforma diseñada para construir herramientas de desarrollo.
 Si bien la plataforma por sí misma no provee mucha funcionalidad al usuario
 ﬁnal, facilita el rápido desarrollo de herramientas con características
 integradas.
 Así, la organización de estas herramientas alrededor de un espacio de trabajo
 común es un principio de diseño central, tanto para Eclipse como para 
\emph on
DRArch
\emph default
.
 En el caso particular de este trabajo, es necesario un cierto nivel de
 integración para aprovechar los componentes existentes de 
\emph on
FLABot
\emph default
 y la infraestructura básica de Eclipse.
 Por estas razones, la arquitectura de 
\emph on
FLABot
\emph default
 ha sido organizada mayormente alrededor de un estilo 
\emph on
data-centered
\emph default
 (centrado en los datos).
 La imposición de este estilo ayuda a soportar los niveles de integración
 antes mencionados y además permite una evolución casi independiente de
 las herramientas.
\end_layout

\begin_layout Standard
La funcionalidad propia de 
\emph on
DRArch
\emph default
 se encuentra organizada alrededor del modelo arquitectónico 
\emph on
BlackBoard
\emph default
, en el cual una base de conocimientos común, el 
\emph on
BlackBoard
\emph default
, es iterativamente actualizada por fuentes de conocimiento especializadas
 (los especialistas), comenzando con la especificación de un problema y
 culminando con la solución.
 Cada fuente de conocimiento actualiza el 
\emph on
BlackBoard
\emph default
 con una solución parcial cuando sus requisitos coinciden con el estado
 del 
\emph on
BlackBoard
\emph default
.
 De esta forma los especialistas trabajan juntos en la resolución del problema.
 El modelo 
\emph on
BlackBoard
\emph default
 fue originalmente designado para manejar problemas complejos y mal definidos.
 Los sistemas basados en este modelo están principalmente enfocados en la
 inteligencia artificial.
\end_layout

\begin_layout Standard
En el 
\emph on
BlackBoard
\emph default
 las fuentes de conocimiento son ejecutadas automáticamente cuando sus precondic
iones coinciden con el estado del 
\emph on
BlackBoard
\emph default
 y el estado de este es actualizado con las transformaciones propias de
 cada fuente.
 Dado que proceso de recuperación arquitectónica descripto por 
\emph on
DRArch
\emph default
 es un proceso guiado, es el arquitecto, el responsable de seleccionar qué
 fuente de conocimiento se va a ejecutar y de decidir cuáles son las transformac
iones que actualizaran el estado del modelo arquitectónico bajo análisis.
 Por esta razón, en la implementación del modelo 
\emph on
BlackBoard
\emph default
 utilizada en esta herramienta, será el arquitecto el encargado de seleccionar
 el orden de ejecución de las transformaciones.
 La base de conocimiento esta determinada por una base de hechos lógicos
 estilo Prolog la cual, como se dijo con anteriormente, es cargada en una
 fase inicial de recolección de información estática (código fuente) y dinámica
 (logs de ejecución).
 Las fuentes de conocimiento encargadas de evaluar el estado del 
\emph on
BlackBoard
\emph default
 y actualizarlo, están materializados mediante un modelo de reglas.
 Las reglas están definidas a partir de una consulta, que evalúa el estado
 del repositorio en busca de algún patrón; una sugerencia, la que será presentad
a al arquitecto para cada uno de los resultados de la consulta; y una serie
 de hechos que determinan la actualización del repositorio y por ende la
 transformación del modelo arquitectónico bajo reconstrucción.
\end_layout

\begin_layout Standard
Por último, el modelo de fases determina la operatibilidad de la herramienta.
 Es el componente orquestador: responsable de guiar el proceso y coordinar
 la interoperabilidad entre los módulos.
\end_layout

\begin_layout Standard
En la figura 
\begin_inset LatexCommand ref
reference "fig:Diagrama de Paquetes"

\end_inset

 se describen los componentes principales de la herramienta.
 A continuación se provee una descripción de las responsabilidades de cada
 uno.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/Package Domain Model.png
	width 60theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama de Paquetes"

\end_inset

Diagrama de paquetes.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Query-Engine"

\end_inset

Query Engine
\end_layout

\begin_layout Standard
Este componente tiene como principal responsabilidad la ejecución de las
 consultas sobre la base de conocimiento y la gestión de esta.
\end_layout

\begin_layout Standard
Forma parte de este componente el motor de consultas y la base de conocimiento.
 Ambas entidades están construidas sobre el plug-in 
\emph on
JQuery
\emph default
 
\begin_inset LatexCommand ref
reference "sec:JQuery"

\end_inset

.
 
\end_layout

\begin_layout Standard

\emph on
JQuery
\emph default
 esta basado en 
\emph on
TyRuBa
\emph default
 que es un lenguaje de programación lógica implementado en Java.
 De esta forma 
\emph on
JQuery
\emph default
 provee a 
\emph on
DRArch
\emph default
 de tres componentes fundamentales: el motor de inferencias, el lenguaje
 de consultas que se ulitizarán en las reglas y la implementación de la
 base de conocimiento sobre la que se realizarán dichas consultas.
 Cada uno de estos componentes han sido abstraídos desacoplándolos de su
 implementación permitiendo que, con mínimo esfuerzo, dichas implementaciones
 puedan variar o evolucionar independientemente.
\end_layout

\begin_layout Subsubsection
KnowledgeBase
\end_layout

\begin_layout Standard
La base de conocimiento consta de dos partes.
 La primera esta basada en los hechos generados durante la fase de recolección
 de la información y la segunda consiste en todos lo hechos generados por
 las ejecuciones de las reglas 
\emph on
DRArch
\emph default
 los cuales se agrupan por fases de ejecución.
 Estos últimos se han hecho persistentes en un archivo de texto con el propósito
 de reutilizar el resultado del análisis realizado en fases subsiguientes.
\end_layout

\begin_layout Standard
De esta forma la base de conocimiento evaluada en cada fase esta compuesta
 por la base de conocimiento generada por el parseo del código fuente y
 por todos los archivos de hechos lógicos que se agreguen a la fase.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Rule-Model"

\end_inset

Rule Model
\end_layout

\begin_layout Standard
El modelo de reglas esta formado principalmente por cuatro entidades.
 Una regla 
\family typewriter
Rule
\family default
 es la entidad mas importante de este componente porque determina la unidad
 funcional de la herramienta.
 Una regla, esta determinada por un 
\family typewriter
Query
\family default
, un 
\family typewriter
SuggestTemplate
\family default
 y un conjunto de 
\family typewriter
FactTemplates
\family default
.
 Un 
\family typewriter
Query
\family default
, a su vez, esta compuesto por una sentencia en formato ProLog que será
 utilizada para realizar una consulta sobre la base de conocimiento y un
 conjunto de variables de interés.
 Estas variables son parte de la consulta.
\end_layout

\begin_layout Standard
Cada 
\family typewriter
SuggestTemplate
\family default
 es una cadena de caracteres con 
\emph on
wildcard
\emph default
 que serán reemplazados por cada uno de los resultados de la consulta.
 Generalmente cada 
\emph on
wildcard
\emph default
 se corresponde con una variable de la consulta.
 Luego de la ejecución, el resultado de la consulta queda determinado por
 los valores de las variables de interés.
 Para cada uno de estos resultados se genera una sugerencia reemplazando
 cada 
\emph on
wildcard
\emph default
 con su correspondiente variable.
\end_layout

\begin_layout Standard
Por ultimo cada 
\family typewriter
FactTemplate
\family default
 del conjunto esta construido de la misma forma que los templates de sugerencias.
 Luego que las sugerencias hayan sido aceptadas se procede a instanciar
 un conjunto de hechos con los correspondientes valores para cada una de
 las sugerencias aceptadas.
 La figura 
\begin_inset LatexCommand ref
reference "fig:Modelo-de-reglas"

\end_inset

 muestra la relación entre estas entidades.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ruleModel.png
	width 60theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Modelo-de-reglas"

\end_inset

Modelo de reglas
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Básicamente el modelo de reglas es una estructura de datos, la cual es necesario
 persistir, visualizar y editar de forma gráfica y amigable para el usuario.
 Se eligió para su implementación el framework EMF de Eclipse.
 EMF es un framework de modelado y generación de código para generar aplicacione
s basadas en un modelo de datos estructurado.
 A partir de la especificación de un modelo descrito en XMI, EMF provee
 las herramientas para producir un conjunto de clases Java para el modelo
 junto con un conjunto de clases 
\emph on
adapters
\emph default
 que permiten la visualización y edición del mismo.
\end_layout

\begin_layout Standard
Como se mencionó anteriormente, es necesario que un conjunto de reglas pueda
 ser reutilizado y ejecutado varias veces y sobre distintas instancias de
 la base de conocimiento.
 Por esta razón es necesario persistir las reglas creadas para su posterior
 utilización y/o edición.
 Utilizando las capacidades del framework EMF, se logró la persistencia
 del modelo como así también la creación de un editor propio de la herramienta
 
\emph on
DRArch
\emph default
 que hace realmente sencilla la edición y visualización de los datos.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Phase-Engine"

\end_inset

Phase Engine
\end_layout

\begin_layout Standard
Este componente es el encargado de la coordinación y la mediación entre
 los componentes descriptos anteriormente.
 Como se menciono en capítulos anteriores, el enfoque 
\emph on
DRArch
\emph default
 posee las propiedades de ser interactivo, iterativo e incremental.
 
\end_layout

\begin_layout Standard
La primera de estas características se da al brindarle al arquitecto el
 control total de lo que se evalúa, tomando todas las decisiones aceptando
 o rechazando las sugerencias propuestas por la herramienta.
 Para satisfacer las demás características se implemento un mecanismo de
 fases iterativas que permite la composición de los resultados de las evaluacion
es realizadas en iteraciones previas.
 
\end_layout

\begin_layout Subsubsection*
Fase
\end_layout

\begin_layout Standard
Una fase tiene como entrada un 
\emph on
working set 
\emph default
(modulo de código que será analizado), una serie de reglas que serán evaluadas
 sobre ese módulo y los archivos de hechos que vayan a componer la base
 de conocimiento para la fase en cuestión.
 El resultado de ejecutar una fase, son dos artefactos: un archivo de hechos
 que fueron producto de la ejecución de cada regla de la fase y un archivo
 
\emph on
FLABot
\emph default
 con la representación gráfica del modelo arquitectónico recuperado.
\end_layout

\begin_layout Standard
Alternativamente se puede enriquecer la base de conocimientos de la fase,
 incorporando un archivo 
\emph on
FLABot
\emph default
 con un modelo arquitectónico definido y volcar la información del modelo
 arquitectónico del archivo a hechos lógicos.
\end_layout

\begin_layout Standard
La entidad 
\family typewriter
PhaseManager
\family default
 es la encargada de lanzar la ejecución de una fase.
 En ese momento se comienzan a ejecutar una por una las reglas que forman
 parte de la fase.
 Al finalizar la ejecución de cada regla, desde la capa de presentación
 se le piden al 
\family typewriter
PhaseManager
\family default
 dichas sugerencias para ser presentadas al usuario.
 Allí, se pasa el control al usuario, quien es responsable de decidir que
 sugerencias acepta y disparar la ejecución de la próxima regla.
 Antes de ejecutar la siguiente regla de la fase, la entidad 
\family typewriter
PhaseManager
\family default
 le pide a la entidad 
\family typewriter
RuleManger
\family default
 que transforme las sugerencias en hechos concretos y luego agrega dichos
 hechos a la base de conocimientos.
 Luego, le da la orden a la entidad 
\family typewriter
DiagramManager
\family default
 que genere los diagramas.
 Finalmente, con los nuevos hechos en la base de conocimiento y el diagrama
 generado se dispara la ejecución de la nueva regla.
\end_layout

\begin_layout Standard
La figura 
\begin_inset LatexCommand ref
reference "fig:Phase-model"

\end_inset

 muestra la estructura del modelo de ejecución de fases.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/stepEngine.png
	width 60theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Phase-model"

\end_inset

Modelo de fases
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Existen dos tipos de fases: las interactivas y las no interactivas.
 Las fases interactivas son aquellas que al finalizar la ejecución de cada
 regla, se presentan las sugerencias al usuario para que este las acepte
 o las rechace.
 Las no interactivas en cambio, automáticamente aceptan todas las sugerencias
 y retorna el control al usuario una vez completada la fase.
 De esta forma se da la posibilidad de automatizar aquellas fases que contengan
 reglas con sugerencias que siempre serán aceptadas.
 Por ejemplo, es posible definir reglas que enriquezcan el análisis estático
 de código fuente provisto por 
\emph on
JQuery
\emph default
 y utilizar dichas reglas en la fase inicial de recolección de información.
\end_layout

\begin_layout Subsubsection*
RuleManager
\end_layout

\begin_layout Standard
La entidad 
\family typewriter
RuleManager
\family default
 es responsable de la ejecución de las reglas y de interpretar los resultados
 para armar las sugerencias, así como también de crear para cada sugerencia
 aceptada el conjunto de hechos correspondiente según lo define el modelo
 de reglas.
 También es responsable de incorporar estos a la base de conocimiento.
 La ejecución de las consultas como se dijo anteriormente está a cargo de
 la entidad 
\family typewriter
QueryEngine
\family default
.
\end_layout

\begin_layout Standard
La Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Rule-Manager"

\end_inset

 muestra la estructura de este componente y su interacción con el 
\family typewriter
QueryEngine
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Graphics
	filename img/ruleEngine.png
	width 60theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Rule-Manager"

\end_inset

Rule Manager
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
DiagramManager
\end_layout

\begin_layout Standard
La entidad 
\family typewriter
DiagramManager
\family default
 esta encargada de traducir la información contenida en la base de conocimiento
 a los modelos de diagramas de 
\emph on
DRArch
\emph default
 (componentes y UCMs).
 Ejecuta una serie de consultas a la base de conocimiento mediante 
\family typewriter
QueryEngine
\family default
 para obtener la información arquitectónica con la que construirá el modelo.
 Luego es llevado al modelo 
\emph on
FLABot
\emph default
 y se delega a esta herramienta el renderizado de los diagramas.
 
\end_layout

\begin_layout Standard
La Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Phase-Management-Interaction"

\end_inset

 y la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Diagrama-de-secuencias"

\end_inset

 muestran los distintos componentes y sus relaciones.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/Phase Interaction.png
	width 70text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Phase-Management-Interaction"

\end_inset

Diagrama de interacciones entre los componentes 
\emph on
DRArch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/Sequence Diagram.png
	width 50pheight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-secuencias"

\end_inset

Diagrama de secuencia entre los componentes 
\emph on
DRArch
\emph default
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:TraceLog-Analyzer"

\end_inset

TraceLog Analyzer
\end_layout

\begin_layout Standard
Como se expuso brevemente en el capítulo anterior, es necesario registrar
 los eventos de bajo nivel que ocurren en la aplicación mientras el usuario
 la ejercita con los casos de uso correspondientes.
 Para ello, se utilizó la infraestructura de instrumentación de código de
 
\emph on
FLABot
\emph default
 (apéndice\InsetSpace ~

\begin_inset LatexCommand ref
reference "cha:Eclipse-FLABot-y-JQuery"

\end_inset

, sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:FLABot"

\end_inset

), ya que define un punto de extensión para la configuración de los eventos
 que deben ser registrados en tiempo de ejecución.
\end_layout

\begin_layout Standard
Básicamente, para la ejecución de una aplicación instrumentada es necesario
 (a) crear una nueva configuración de ejecución en Eclipse (
\emph on
launch configuration
\emph default
, Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "cap:Launch-config"

\end_inset

) y (b) iniciar la ejecución de esta configuración.
 
\emph on
FLABot
\emph default
 permite la es\SpecialChar \-
pe\SpecialChar \-
cia\SpecialChar \-
li\SpecialChar \-
za\SpecialChar \-
ción de la funcionalidad del módulo de instrumentación
 mediante el punto de extensión 
\emph on

\begin_inset Quotes eld
\end_inset

org.isistan.flabot.contextProvider
\begin_inset Quotes erd
\end_inset


\emph default
, que consiste en la definición de dos interfaces abstractas: 
\emph on
AbstractConfigurationTab
\emph default
 y 
\emph on
FlabotFileContextProvider
\emph default
, responsables de los puntos (a) y (b) respectivamente\SpecialChar \@.
 Las implementaciones
 de la primera interfaz se encargan de permitir al usuario configurar de
 manera gráfica la información necesaria para la creación del log de ejecución
 (ubicación del archivo de salida, tipos de eventos a registrar, profundidad
 de la inspección, etc.), mientras que las de la segunda proveen esta información
 al módulo de instrumentación.
 La relación entre 
\emph on
DRArch
\emph default
 y 
\emph on
FLABot
\emph default
 por medio de puntos de extensión se resume en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Relación-entre-DRArch"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/RunFlabotCollecting.png
	lyxscale 80
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Configuración-de-ejecución"

\end_inset

Configuración de ejecución en Eclipse
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/TraceLogConfigurationClassDiagram.PNG
	width 40page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Relación-entre-DRArch"

\end_inset

Relación entre 
\emph on
DRArch
\emph default
 y 
\emph on
FLABot
\emph default
 mediante puntos de extensión
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez definida la extensión, la interacción entre 
\emph on
FLABot
\emph default
 y 
\emph on
DRArch
\emph default
 es relativamente simple.
 El arquitecto debe configurar la ejecución de la aplicación a instrumentar
 desde una interfaz de usuario de la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Configuración-de-ejecución"

\end_inset

.
 Algunas de estas configuraciones son:
\end_layout

\begin_layout Enumerate
La aplicación a ser instrumentada.
\end_layout

\begin_layout Enumerate
El archivo de salida (
\emph on
nombre_del_archivo.tracelog
\emph default
).
\end_layout

\begin_layout Enumerate
El modelo 
\emph on
FLABot
\emph default
 que contiene la información de qué es lo que se va a instrumentar.
 Este modelo es generado por 
\emph on
DRArch.
\end_layout

\begin_layout Enumerate
El nivel de profundidad en el que se va a guardar la información.
 Cuanto mas profundidad, más información tendrá el log.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
Cuando la aplicación a instrumentar está a punto de ser ejecutada, se crea
 una instancia de 
\emph on
ArchSyncTraceConfigurationProvider
\emph default
 a la que se le interroga acerca de qué eventos deben ser registrados durante
 la ejecución.
 A su vez, el objeto utiliza los mapeos del UCM desactualizado y el resultado
 del análisis realizado por 
\emph on
Diff Mapper
\emph default
, para indicar que debe ser registrada la ejecución de tanto los métodos
 asociados directamente a alguna responsabilidad como los métodos agregados
 o modificados que afectan indirectamente.
 Esta interacción se detalla de manera gráfica en el diagrama de secuencia
 de la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "cap:Interacción-launcher-Archsync"

\end_inset

.
 Una vez provisto de la información necesaria, 
\emph on
FlabotInstumentationLaucher
\emph default
 se encarga de ejecutar la aplicación instrumentada y de registrar los eventos
 necesarios en el archivo que fue indicado durante la configuración.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/nfrontini/facultad/tesis/tesis tincho/img/sequence-traceConfiguration.png
	lyxscale 80
	width 99line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "cap:Interacción-launcher-Archsync"

\end_inset

Interacción entre 
\emph on
ArchSync
\emph default
 y 
\emph on
FLABot
\emph default
 previa a la instrumentación
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez que fue creado un log de ejecución para un caso de uso en particular,
 
\emph on
Log Analyzer
\emph default
 se encarga de interpretar los eventos de bajo nivel contenidos en el log
 para transformarlos en hechos al estilo 
\emph on
ProLog
\emph default
.
 El proceso de transformación sigue un algoritmo simple: el componente utiliza
 la información de mapeo entre responsabilidades y métodos recorriendo el
 log de ejecución, tomando sus entradas (ejecuciones de métodos) una a una.
 Este proceso se muestra en el Algoritmo\InsetSpace ~

\begin_inset LatexCommand ref
reference "alg:Algoritmo-Log-Analyzer"

\end_inset

.
 Este algorítmo tambíen se encarga de generar los hachos del estilo 
\family typewriter
stapshot
\family default
, encargados de guardar la información relacionada con el estado del sistema
 en el momento que se ejecuto una responsabilidad.
 
\begin_inset Note Note
status open

\begin_layout Standard
relacionarlo con el parametro de configuracion "profundidad"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Standard

\series bold
log-analyzer
\series default
(log: Log, mappings: Mappings)
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
factList = new List
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~

\series bold
for
\series default
 entradaLog 
\series bold
in
\series default
 log
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
responsabilidades = mappings.getResponsibilities(entradaLog)
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
materializaciones = responsabilidades.getExecutions()
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~

\series bold
for
\series default
 materialization 
\series bold
in
\series default
 materializaciones
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
execId = materialization.getTags().get("executionId")
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
exitValue = materialization.getTags().get("value")
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
arguments[] = materialization.getTags().get("arguments")
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
behavior = materialization.getTags().get("behavior")
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
methodName = behavior.getTags() .get("name")
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
className = behavior.getTags().get("declaringClass")
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
factsList.add(predicateFactory.createExecutedMethodValue(
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
className + "." + methodName, execId, exitValue, arguments[]))
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
snapshotFacts(materialization)
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~

\series bold
end for
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~

\series bold
end for
\end_layout

\begin_layout Standard
\InsetSpace ~
\InsetSpace ~

\series bold
return
\series default
 factList
\end_layout

\begin_layout Standard

\series bold
end log-analyzer
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:Algoritmo-Log-Analyzer"

\end_inset

Algoritmo Log Analyzer
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los hechos generados por este componente son almacenados en la base de datos
 del conocimiento junto con el resto de la información.
 De esta forma, quedaría disponible la posibilidad de relacionar información
 tanto estática como dinámica.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Conclusiones"

\end_inset

Conclusiones
\end_layout

\begin_layout Standard
En éste capítulo se describieron los aspectos más importantes acerca de
 la arquitectura, diseño detallado e implementación de 
\emph on
DRArch
\emph default
.
 La herramienta requiere la colaboración de componentes pertenecientes a
 otros sistemas, mas específicamente 
\emph on
Eclipse
\emph default
, 
\emph on
FLABot
\emph default
 y 
\emph on
JQuery
\emph default
.
 
\end_layout

\begin_layout Standard

\emph on
Eclipse
\emph default
 fue seleccionado principalmente por ser el entorno de desarrollo Java más
 popular en la actualidad y además, por brindar una arquitectura preparada
 para la integración de herramientas mediante extensiones.
 En segundo lugar, 
\emph on
Eclipse
\emph default
 ofrece un metamodelo del lenguaje Java idóneo para la manipulación de informaci
ón de código fuente.
 
\end_layout

\begin_layout Standard

\emph on
JQuery
\emph default
 es quien utiliza las ventajas de Eclipse sobre el metamodelo del lenguaje
 Java para realiza la transformación del código fuente a una representación
 de hechos al estilo 
\emph on
ProLog
\emph default
.
 
\end_layout

\begin_layout Standard

\emph on
FLABot
\emph default
, por otro lado, se emplea por dos razones centrales: ofrece un editor UCM
 con soporte para mapeo responsabilidad-código y además incluye soporte
 para instrumentar aplicaciones.
 El motor de instrumentación de aplicaciones 
\emph on
FLABot
\emph default
 genera un log de bajo nivel que es procesado por el componente 
\emph on
TraceLog Analyzer
\emph default
 para realizar una transformación de la información en hechos al estilo
 
\emph on
ProLog
\emph default
.
\end_layout

\begin_layout Standard
A diferencia de algunos de los enfoques mencionados en el capítulo tres
 que siguen el mismo patrón de extraer, abstraer y presentar y que utilizan
 una base de datos relacional para almacenar las representaciones intermedias
 del modelo arquitectónico, 
\emph on
DRArch
\emph default
 utiliza el motor de consultas y la base de datos lógica provisto por 
\emph on
JQuery
\emph default
.
 Esta decisión se basa en que al momento de realizar una consulta en un
 lenguaje lógico, se consulta por el qué y no por el cómo como es el caso
 de los los enfoques relacionales, lo que hace más sencillo y natural al
 arquitecto formular sus propias reglas.
 Para tal propósito se creó un editor utilizando las ventajas que ofrece
 SWT, un 
\emph on
toolkit
\emph default
 de elementos gráficos diseñados para ser portables y aprovechar las capacidades
 de los sistemas operativos sobre los que se ejecuta.
\end_layout

\begin_layout Standard
De esta forma, al estar todo lo necesario integrado en el ambiente de desarrollo
, si el arquitecto pretende incorporar la tarea de reconstrucción a su rutina,
 podrá hacerlo incluyendo únicamente el plug-in 
\emph on
DRArch
\emph default
 y sus dependencias, es decir: 
\emph on
FLABot
\emph default
 y 
\emph on
JQuery
\emph default
.
\end_layout

\begin_layout Standard
En el próximo capítulo se analizará el desempeño de 
\emph on
DRArch
\emph default
 ante un sistemas real en desarrollo: 
\emph on
G2
\emph default
.
 Tales casos de estudio permitirán evaluar mejor la conveniencia de las
 decisiones de diseño explicadas en este capítulo.
\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:Casos-de-Estudio"

\end_inset

Casos de estudio
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
alvaro says: la idea seria hacerlo incremental 
\end_layout

\begin_layout Standard
alvaro says: ir descubriendo incrementalmente la arquitectura 
\end_layout

\begin_layout Standard
alvaro says: mostrar el diseño objetos...
 y ver que obtieneñ 
\end_layout

\begin_layout Standard
alvaro says: y despues ir aumentando el scope para ir refinando la descripcion
 
\end_layout

\begin_layout Standard
alvaro says: esa seria la idea del caso de estudio 
\end_layout

\begin_layout Standard
alvaro says: hacerlo para un aspecto y despues armar una tabla con los resultado
s de descubrimeinto del resto 
\end_layout

\begin_layout Standard
alvaro says: diciendo que componentes encontro sobre que componentes debió
 encontrar 
\end_layout

\begin_layout Standard
alvaro says: y mostrando tambien cuales reglas se tuvieron que agregar 
\end_layout

\begin_layout Standard
alvaro says: se entiende? 
\end_layout

\begin_layout Standard
alvaro says: el primer caso deberia ser el market 
\end_layout

\begin_layout Standard
alvaro says: donde ustedes refinan las reglas
\end_layout

\begin_layout Standard
Fronti says: y despeus pasamos a G2 
\end_layout

\begin_layout Standard
alvaro says: y despues ver el G2 para ver si se mejoró la eficacia 
\end_layout

\begin_layout Standard
alvaro says: claro..
 
\end_layout

\begin_layout Standard
Fronti says: ok 
\end_layout

\begin_layout Standard
alvaro says: en el market introducen Bubble y despues el caso g2 sale de
 ahi 
\end_layout

\begin_layout Standard
Fronti says: ok..se entiende 
\end_layout

\begin_layout Standard
alvaro says: y ven que reglas tuvieron que agregar para descubrir la arquitectur
a G2..
 
\end_layout

\begin_layout Standard
alvaro says: es decir, que conocimiento del arquitectura tuvo que codificar
 el arquitecto para recuperar con cierta eficacia el diseño.
 
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
alvaro says: lo que tienen que definir son las métricas que van a tomar
 del experimento 
\end_layout

\begin_layout Standard
Fronti says: algo como medir el tiempo, y la efectividad, no? 
\end_layout

\begin_layout Standard
alvaro says: si.
 el tiempo no creo que puedan salvo que lo hagan ustedes 
\end_layout

\begin_layout Standard
alvaro says: mas que nada efectividad 
\end_layout

\begin_layout Standard
alvaro says: ahi te mande un paper de andres y luis donde usan algunas metricas
 de comparar efectividad ..
 
\end_layout

\begin_layout Standard
alvaro says: para que tengas una idea de lo que hablo...
 
\end_layout

\begin_layout Standard
Fronti says: buenisimo 
\end_layout

\begin_layout Standard
alvaro says: no son especificamente esas pero pueden usarlas para verificar..
 
\end_layout

\begin_layout Standard
alvaro says: y tambien pueden relacionar el error de precision del tool
 con metricas del código fuente 
\end_layout

\begin_layout Standard
alvaro says: como complejidad ciclomática, cantidad de sentencias, etc.
 
\end_layout

\begin_layout Standard
alvaro says: como para ver si sacan algoñ 
\end_layout

\begin_layout Standard
Fronti says: esta bien
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este capítulo describe una serie de casos de estudio que realizamos para
 verificar si las suposiciones hechas a nivel conceptual pueden ser corroboradas
 en la práctica.
 Los casos de estudio presentados aquí apuntan primero a demostrar que el
 enfoque 
\emph on
DRArch
\emph default
 puede ser aplicable a la reconstrucción arquitectónica de un sistema, y
 segundo, a ilustrar cómo se usó la herramienta en diferentes proyectos,
 para poder investigar los puntos fuertes y débiles del enfoque.
 En particular, en este capítulo se pretende analizar la utilidad, precisión
 y validez de la herramienta frente a un sistema real ya implementado.
 En cada caso de estudio se medirán (a) la cantidad de trabajo que le fue
 ahorrado al arquitecto en el análisis en la documentación del sistema --como
 indicadores de utilidad--, (b) la cantidad de soluciones diferentes propuestas
 por la herramienta --como indicador inverso a la precisión-- y (c) si la
 solución esperada por el arquitecto estaba entre las alternativas --como
 indicador de validez.
\end_layout

\begin_layout Standard
La selección de los casos de estudio estuvo organizada de acuerdo con una
 estrategia incremental.
 Inicialmente, se probó la herramienta con ejemplos simples como los presentados
 en los capítulos anteriores.
 Ésto permitió ajustar el funcionamiento del prototipo hasta obtener resultados
 aceptables.
 Una vez alcanzada una versión re\SpecialChar \-
la\SpecialChar \-
ti\SpecialChar \-
va\SpecialChar \-
men\SpecialChar \-
te estable del prototipo, se realizó
 la reconstrucción de un proyecto prototipo llamado Maket, y luego, se paso
 a reconstruir un proyecto comercial de tamaño mediano, llamado 
\emph on
G2
\emph default
.
 En esta etapa, se probó el desempeño de la herramienta frente a un sistema
 real.
 Ambos proyectos utilizan un framework basado en invocaciones implícitas
 llamado Bubble\InsetSpace ~

\begin_inset LatexCommand cite
key "CAMPO02"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
agregar un comentario asi: ...descubriendo incrementalmente la arquitectura
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El capítulo se encuentra organizado de la siguiente manera.
 Primero se presenta el caso de estudio Market en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Market"

\end_inset

.
 Luego se presenta un caso para el sistema 
\emph on
G2
\emph default
 en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:G2"

\end_inset

.
 A continuación, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Arquitectura-Original-G2"

\end_inset

 se muestra la arquitectura propuesta por G2.
 Finalmente, en la sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sec:Análisis-de-resultados"

\end_inset

, se comparan los resultados de ambos mediante un breve análisis.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Market"

\end_inset

Market
\end_layout

\begin_layout Standard
Market es un sistema donde compradores (
\emph on
buyers
\emph default
) y vendedores (
\emph on
sellers
\emph default
) son libres de realizar transacciones.
 De esta forma, el mercado es un contenedor de agentes en donde compradores
 y vendedores son slimples agentes (
\emph on
agents
\emph default
).
 Todos los agentes pueden realizar un conjunto de tareas (
\emph on
tasks
\emph default
).
 Una tarea esta compuesta por uno o mas procedimientos.
 Las tareas se disparan con condiciones predefinidas, y pueden estar relacionada
s al estado interno del agente o a un evento 
\begin_inset LatexCommand cite
key "Drogoul92"

\end_inset

.
 Para realizar este comportamiento, Market utiliza un framework basado en
 invocación implícita llamado Bubble\InsetSpace ~

\begin_inset LatexCommand cite
key "CAMPO02"

\end_inset

, donde los componentes principales son: agentes, tareas, sensores y eventos.
 Los agentes representan entidades del dominio y para separa el estado de
 las acciones, se utiliza la nocion de tareas.
 La interacción entre los agentes, llamados bubbles, es realizada a travez
 de eventos que ellos mismos producen y reciven.
 Los agentes estan asociados a sensores (como filtros) que son registrados
 para activarse con determinados eventos ó grupos de eventos 
\begin_inset LatexCommand cite
key "Andres2001"

\end_inset

.
 La figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Diagrama-de-clases-Bubble"

\end_inset

 muestra un diagrama de clases del framework Bubble con las principales
 clases pintadas con color azul y la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Modelo-arquitectónico-del-Bubble"

\end_inset

 muestra un diagrama del modelo arquitectónico del fremework.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Traducir la fiugra!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/BubbleCoreClassDiagram.png
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-clases-Bubble"

\end_inset

Diagrama de clases del framework Bubble.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/BubbleModeloConceptual.png
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Modelo-arquitectónico-del-Bubble"

\end_inset

Modelo arquitectónico del framework Bubble.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La instanciación del framework Bubble que realiza Market esta materializada
 con las siguientes clases:
\end_layout

\begin_layout Itemize
Tareas:
\end_layout

\begin_deeper
\begin_layout Itemize
BidTask
\end_layout

\begin_layout Itemize
BuyTask
\end_layout

\begin_layout Itemize
InitializeTimerTask
\end_layout

\begin_layout Itemize
ProcessOrderTask
\end_layout

\begin_layout Itemize
RequestTask
\end_layout

\begin_layout Itemize
SellTask
\end_layout

\begin_layout Itemize
TimerTask
\end_layout

\end_deeper
\begin_layout Itemize
Agentes
\end_layout

\begin_deeper
\begin_layout Itemize
Customer
\end_layout

\begin_layout Itemize
Dealer
\end_layout

\begin_layout Itemize
Timer
\end_layout

\end_deeper
\begin_layout Itemize
Eventos
\end_layout

\begin_deeper
\begin_layout Itemize
MarketAgentEvent
\end_layout

\end_deeper
\begin_layout Itemize
Sensores
\end_layout

\begin_deeper
\begin_layout Itemize
CustomerSensor
\end_layout

\begin_layout Itemize
DealerSensor
\end_layout

\begin_layout Itemize
TimerSensor
\end_layout

\end_deeper
\begin_layout Standard
La documentación de la arquitectura del Market provee un conjunto de UCMs
 que nos permiten entender el comportamiento del sistema.
 Con el objetivo de poder hacer comparaciónes con los resultados obtenidos
 con el 
\emph on
DRArch
\emph default
, en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Market-UCMs"

\end_inset

 se muestran algunos de estos UCMs.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/MarketDiagramasUCM.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Market-UCMs"

\end_inset

Diagramas UCMs para el proyecto Market
\emph on
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Caso 1
\end_layout

\begin_layout Standard
Con el objetivo de poder reconstruir uno de los aspectos más importantes
 de la arquitectura del sistema Market, en este caso de estudio se utilizó
 la herramienta 
\emph on
DRArch
\emph default
 teniendo en cuenta de que la funcionalidad del sistema esta organizada
 en 
\emph on
tareas.
\end_layout

\begin_layout Subsubsection
Fase de recolección de información
\end_layout

\begin_layout Standard
Como primera fase, se debe seleccionar el código fuente que se va a incluir
 en el análisis.
 En este caso, utilizaremos todo el código fuente disponible del sistema
 Market.
 Luego, se debe incluir la información dinámica, y para esto, se debe ejecutar
 un caso de uso que represente la funcionalidad principal del sistema.
 Un caso de uso típico para este sistema es el de realizar una oferta (
\emph on
bidding
\emph default
).
 Debido a que la aplicación es un un ejemplo para utilizar el framework
 Bubble, hay un único punto de entrada al sistema que ejecuta todos los
 casos de uso sin interface de gráfica (modo consola) y sin necesidad de
 utilizar datos de entrada.
 En la figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Configuración-del-log"

\end_inset

 se mustra la configuracion necesaria para generar el log de ejecución.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/EclipseRunFlabotConfiguration.png
	width 40theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Configuración-del-log"

\end_inset

Configuración para la generación del log de ejecución en 
\emph on
Eclipse
\emph default
 utilizando 
\emph on
FLAbot.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fase de estructura de paquetes
\end_layout

\begin_layout Standard
Basado en el supuesto de que cualquier sistema se debe dividir en unidades
 más pequeñas, esta fase intenta identificar esas unidades con el objetivo
 de acotar el análisis y hacer foco en las unidades de mayor relevancia.
 Las reglas que componen esta fase son simples (del estilo 
\family typewriter
package(?P)
\family default
) ya que proponen la divisón de unidades basandose en la estrutura de paquetes
 que presenta el código fuente.
 De esta forma, se identificaron tres unidades distintas: 
\family typewriter
bubble.core
\family default
, 
\family typewriter
distribution
\family default
 y 
\family typewriter
market
\family default
.
 
\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand label
name "sub:Fase-de-invocación-implicita"

\end_inset

Fase de invocación implícita
\end_layout

\begin_layout Standard
Esta fase esta compuesta por reglas cuyo propósito es descubrir componentes
 y relaciones que puedan ser parte de un framework basado en invocaciones
 implícitas: manejo de eventos, tareas, agentes, etc.
 Con la división de unidades realizada en la fase anterior, se decidió correr
 esta fase únicamente a los artefáctos de código fuente ubicados dentro
 del pauqete 
\family typewriter
bubble.core
\family default
, ya que por su nombre y por las clases que lo continen, se presenta como
 candidato para alojar los componentes principales del framework.
 Las reglas más importantes presentadas por la herramienta 
\emph on
DRArch
\emph default
 se agrupan en las siguientes categorías:
\end_layout

\begin_layout Standard
Detección de tareas: Este conjunto de reglas tiene como objetivo materializar
 artefactos del código fuente a componentes que representen una tarea.
\end_layout

\begin_layout Standard
Detección de eventos: 
\begin_inset Note Note
status open

\begin_layout Standard
faltan aclaraciones
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Detección del agente: Como dijimos anteriormente, los agentes representan
 entidaded del sistema, y este conjunto de reglas intenta decubrir el conjunto
 de clases que se materializan con un componente agente.
\end_layout

\begin_layout Standard
El resultado obtenido luego de la ejecución de esta fase es un conjunto
 de diagramas y los más importantes se muestran en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Resultado-de-la-fase-de-invocacion-implicita-market"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/BubbleDiagramasDrarch.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Resultado-de-la-fase-de-invocacion-implicita-market"

\end_inset

Resultado de la fase de Invocación Implícita
\emph on
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fase de materialización de invocación implícita
\end_layout

\begin_layout Standard
Esta fase esta compuesta por reglas cuyo propósito es descubrir componentes
 y relaciones que estén materializados con invocaciones implícitas: 
\begin_inset Note Note
status collapsed

\begin_layout Standard
implementaciones de tareas, extender de eventos, etc.
\end_layout

\end_inset

manejo de eventos, tareas, etc.
 De esta forma, se agruparon las reglas más importantes presentadas por
 la herramienta 
\emph on
DRArch
\emph default
 en las siguientes categorías:
\end_layout

\begin_layout Standard
Detección de tareas: Este conjunto de reglas tiene como objetivo materializar
 artefactos del código fuente a componentes que representen una tarea.
\end_layout

\begin_layout Standard
Detección de intermediarios: 
\begin_inset Note Note
status open

\begin_layout Standard
agragar como fase nueva???
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
agragar mas descripcion
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El resultado obtenido luego de la ejecución de esta fase se muestra en la
 Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Resultado-de-la-fase-de-materializacion-i-e-market"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/MarketDiagramasDrarch.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Resultado-de-la-fase-de-materializacion-i-e-market"

\end_inset

Resultado de la fase de Materialización de Invocación Implícita
\emph on
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fase de instanciación
\end_layout

\begin_layout Standard
Luego de las fases de invocación implícita, se detectaron tareas ..
\begin_inset Note Note
status open

\begin_layout Standard
falta info
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El resultado obtenido luego de la ejecución de esta fase se muestra en la
 Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Resultado-de-la-fase-de-instanciacion-market"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/MarketDiagramasUCMDrarch.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Resultado-de-la-fase-de-instanciacion-market"

\end_inset

Resultado de la fase de Instanciación del Market
\emph on
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:G2"

\end_inset

G2
\end_layout

\begin_layout Standard
El sistema G2 se basa en la arquitectura 
\emph on
client
\emph default
-
\emph on
server
\emph default
 de tres bandas (
\emph on
three-tier
\emph default
) que se muestra en la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Arquitectura-de-G2"

\end_inset

.
 El usuario interactúa por medio de un 
\emph on
browser
\emph default
 y envía solicitudes que son interceptadas por un servidor 
\emph on
web
\emph default
 para ser delegadas al servidor G2, en la segunda banda correspondiente
 a la lógica del negocio, por intermedio del componente GateKeeper.
 Esta banda fue implementada mediante la instanciación del framework 
\emph on
Bubble
\emph default
 
\begin_inset LatexCommand cite
key "CAMPO02"

\end_inset

, donde la funcionalidad se encuentra organizada en 
\emph on
tareas
\emph default
 que son asignadas a diferentes 
\emph on
agentes reactivos
\emph default
.
 GateKeeper traduce cada solicitud para activar a los agentes encargados
 de ejecutar las tareas correspondientes.
 Las tareas relacionadas con la administración del modelo del negocio normalment
e interactúan con el componente de persistencia para consultar o alterar
 los datos relevantes del repositorio de datos, en la tercer banda.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/bubble.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Arquitectura-de-G2"

\end_inset

Arquitectura de G2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los siguientes casos de estudio sobre el sistema G2 se efectuaron sobre
 el componente de la segunda banda del modelo 
\emph on
three
\emph default
-
\emph on
tier
\emph default
, por ser éste el subsistema mas complejo y donde se concentró el trabajo
 de desarrollo.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/RemoveUserComponent.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-componentes-g2-eliminar-usuario"

\end_inset

Diagrama de componentes original para el caso de uso "eliminar usuario"
 de la aplicación G2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/RemoveUserUCM.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-UCMs-g2-eliminar-usuario"

\end_inset

Diagrama de UCMs original para el caso de uso "eliminar usuario" de la aplicació
n G2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Caso 1
\begin_inset LatexCommand label
name "sub:G2-Caso-1"

\end_inset


\end_layout

\begin_layout Standard
Con el objetivo de poder reconstruir uno de los aspectos más importantes
 de la arquitectura del sistema G2, en este caso de estudio se utilizó la
 herramienta 
\emph on
DRArch
\emph default
 teniendo en cuenta de que la funcionalidad del sistema esta organizada
 en 
\emph on
tareas y eventos.
 
\emph default
Como se mencionó en la sección anterior, este sistema esta basado en el
 framework 
\emph on
Bubble 
\emph default
de la misma forma que el sistema analizado anteriormente con lo cual se
 reutilizarán las fases de analisis implementadas en el análisis anterior
 para recuperar la instanciación del framework.
 Posteriormente, aumentando el espacio de solución se iran descubriendo
 todos aquellos componentes que interactuan con los componentes del framework.
 
\end_layout

\begin_layout Standard
Un escenario donde pueden verse la implementación del framework Bubble en
 el sistema G2 es el caso de uso RemoveUser (utilizado más tarde para ejercitar
 la herramienta).
 Aqui un usuario administrador envia por medio de su browser una solicitud
 de eliminar a otro usuario del sistema, siempre que sus permisos lo permitan.
 Cuando esta solicitud llega al sistema por medio del GateKeeper, se activan
 los agentes encargados de eliminar a un usuario del modelo.
 Una vez que el agente asignado detecta esta señal, invoca a la tarea de
 eliminación, representada por la responsabilidad UCM 
\emph on
removeUser
\emph default
 
\begin_inset LatexCommand ref
reference "fig:Diagrama-de-UCMs-g2-eliminar-usuario"

\end_inset

.
 Mas adelante se eliminan los registros relacionados del repositorio de
 datos, como lo indica la responsabilidad UCM 
\emph on
deleteUserFromDB
\emph default
 y finalmente se retorna a la pagina con un listado actualizado de los usuarios;
 representado por la secuencia de activación de responsabilidades 
\emph on
listUsers
\emph default
, 
\emph on
generateHTMLResponse
\emph default
 y 
\emph on
sendResponse
\emph default
.
\end_layout

\begin_layout Standard
La figura 
\begin_inset LatexCommand ref
reference "fig:Diagrama-de-componentes-g2-eliminar-usuario"

\end_inset

 presenta el diagrama de componentes documentado por G2.
 
\end_layout

\begin_layout Subsubsection
Fase de recolección de información
\end_layout

\begin_layout Standard
Como primera fase, se debe seleccionar el código fuente que se va a incluir
 en el análisis.
 En este caso, utilizaremos todo el código fuente disponible del sistema
 G2.
 Luego, se debe incluir la información dinámica, y para esto, se debe ejecutar
 un caso de uso que represente la funcionalidad principal del sistema.
 El escenario seleccionado fue removeUser descripto en la sección anterior.
\end_layout

\begin_layout Standard
La Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Instrumentación-de-la"

\end_inset

 muestra la interfaz gráfica del sistema G2 durante su ejecución instrumentada,
 lista para proceder con la eliminación de un usuario.
 A su vez puede observarse un panel de control que el arquitecto emplea
 para decidir el momento en que las acciones instrumentadas deben registrarse
 en el log de ejecución.
 Luego de reproducido el escenario sobre el sistema instrumentado, el log
 de ejecución generado es transformado por el componente 
\emph on
TraceLog Analizer, 
\emph default
para realizar la transformación correspondiente (representación del log
 en hechos al estilo ProLog).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/listadoUsuariosFlabot.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Instrumentación-de-la"

\end_inset

Instrumentación de la aplicación G2 durante el caso de uso “eliminar usuario”
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
Un escenario donde puede verse en acción el modelo típico del sistema G2
 es el caso de uso 
\emph on
removeUser
\emph default
 presentado en el 
\emph on
path
\emph default
 la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "cap:UCM-removeUser"

\end_inset

.
 Aquí un usuario administrador envía por medio de su browser la solicitud
 de eliminar a otro usuario del sistema, siempre que sus permisos lo permitan.
 Cuando esta solicitud llega al sistema por medio del GateKeeper, se activan
 los agentes encargados de eliminar a un usuario del modelo.
 Una vez que el agente asignado detecta esta señal, invoca a la tarea de
 eliminación, representada por la responsabilidad UCM 
\emph on
removeUser
\emph default
.
 Mas adelante, se eliminan los registros relacionados del repositorio de
 datos, como lo indica la responsabilidad UCM 
\emph on
deleteUserFromDB
\emph default
 y finalmente se le retorna una página con el listado actualizado de usuarios;
 representado por la secuencia de activación de responsabilidades 
\emph on
listUsers
\emph default
, 
\emph on
generateHTMLResponse
\emph default
 y 
\emph on
sendResponse
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez finalizada la fase de recolección, se continúa con la ejecución
 del resto de las fases.
\end_layout

\begin_layout Subsubsection
Fase de invocación implícita 
\end_layout

\begin_layout Standard
Al igual que para el caso de analisis anterior, esta fase tiene como proposito
 principal descubrir aquellos componentes y relaciones que pertenecen al
 framework Bubble.
 Las reglas DRArch que forman esta fase estan encargadas de materializar
 artefactos de codigos fuentes que representen tareas, agentes y aquellos
 encargados del manejo de eventos.
\end_layout

\begin_layout Standard
Al estar basados en el mismo framework que el caso de análisis anterior,
 se reutilizaron las mismas reglas.
 Más adelante se verá como de vuelve a ejecutar esta fase debido a información
 extra que brindó la ejecución del caso de uso.
\end_layout

\begin_layout Subsubsection
Fase de materialización
\end_layout

\begin_layout Standard
De nuevo, se reutilizaron las mismas reglas que en el caso anterior.
 Una vez individualizados los puntos de extensión del framework de buscaron
 los componentes específicos del dominio de G2.
 Estos componentes responden a la instanciacion del framework para el caso
 específico del sistema G2.
 De esta forma, se detectaron los siguientes componentes basados en la ejercitac
ion de DRArch con el caso de uso Remove User:
\end_layout

\begin_layout Standard
RemoveUserTask, ListUserTask y StaticHTMLStaticTask y un monton mas .....
\end_layout

\begin_layout Standard
Al termino de la ejecución de esta fase se cuenta con la base de conocimientos
 cargada con la información específica del framework y su instanciación
 en el dominio de G2.
 Fases posteriores irán trabajando sobre esta base de conocimiento general
 y la irán enriqueciendo con información que el arquitecto considere relevante
 a las fases posteriores.
\end_layout

\begin_layout Subsubsection
Fase de instanciación
\end_layout

\begin_layout Standard
Durante esta fase se trabajó sobre el caso de uso utilizado para ejercitar
 la herramienta, RemoveUser.
 Para elevar el nivel de detalle de la información recuperada se buscó seguir
 el path de ejecución e ir individualizando a lo largo de este cuales eran
 los componentes que tocaba.
 Dado que es una aplicación multithread no se puede o mejor dicho no es
 recomendable realizar un seguimiento de la ejecucíon a nivel de thread.
 En lugar de esto se hizo a nivel de datos.
 Es decir, un elemento es compartido y/o utilizado en la comunicacion de
 cada uno de los distintos threads que componen la ejecución del sistema.
 En el caso de G2 y mas específicamente de Bubble este elemento son los
 Eventos.
 Asi, siguiendo el rastro de un evento a lo largo de la ejecución del caso
 de uso se encontró un nuevo tipo de componente que no habia sido descubierto
 en fases anteriores y que pertenece al framework Bubble: los Sensores 
\begin_inset Note Note
status open

\begin_layout Standard
(explicacion de que son los sensores?)
\end_layout

\end_inset

.
 Ya que la fase de invocación implícita se basó en el caso de análisis del
 sistema Market y dada la simplicidad del caso de uso utilizado para ejercitar
 DRArch en ese momento, han quedado fuera del analisis dinamico varios eventos
 de bajo nivel que si fueron capturados gracias a la riqueza del caso de
 uso utilizado para ejercitar DRArch con el sistema G2.
\end_layout

\begin_layout Standard
Con esta nueva información, se procedio a incorporar nuevas reglas a la
 fase de invocación implícita que descubrieran estos eventos de bajo nivel
 y se reejecutaron las fases anteriores.
\end_layout

\begin_layout Standard
Al termino de la ejecucíon de esta fase se obtuvieron aquellos componentes
 comprometidos con la ejecución del caso de uso que forman parte de la instancia
ción del framework Bubble para el dominio de G2.
\end_layout

\begin_layout Subsubsection
Fase de reconocimiento de intermediarios
\end_layout

\begin_layout Standard
Una vez reconocidos los componentes que forman parte de la implementación
 del framework, se pretendio encontrar todos aquellos componentes que interactua
n con los elementos del framework.
 De esta forma se descubrieron los componentes GateKeeper y UserDBView encargado
s de activar los agentes que ejecutan las tareas y de abstraer el acceso
 a la capa de persistencia de datos respectivamente.
\end_layout

\begin_layout Standard
Las figuras 
\begin_inset LatexCommand ref
reference "fig:Diagrama-de-componentes-DRArch-remove-user"

\end_inset

 y 
\begin_inset LatexCommand ref
reference "fig:Diagrama-UCM-DRArch-remove-user"

\end_inset

 reflejan como ha resultado la reconstrucción de la arquitectura para el
 sistema G2 basados en el caso de uso "elimina usuario".
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
ordenar los componentes de la figura y que no quede ninguno selecionado
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/Recovered G2 Components.png
	width 40theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-de-componentes-DRArch-remove-user"

\end_inset

Diagrama de componentes generado por 
\emph on
DRArch
\emph default
 para el caso de uso "eliminar usuario" de la aplicación G2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/Recovered G2 UCM.png
	width 50theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Diagrama-UCM-DRArch-remove-user"

\end_inset

Diagrama UCM generado por 
\emph on
DRArch
\emph default
 para el caso de uso "eliminar usuario" de la aplicación G2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Análisis-de-resultados"

\end_inset

Análisis de resultados
\end_layout

\begin_layout Standard
Los casos de prueba desarrollados en el presente capítulo ponen bajo análisis
 dos sistemas de proporciones diferentes.
 Por un lado, Market, un proyecto de ejemplo para probar el funcionamiento
 de un framework, con unas 40 clases, especifiacado parcialmente a nivel
 arquitectónico por 10 escenarios UCM.
 Por otro lado, G2, un proyecto mediano de aproximadamente 900 clases, también
 especificado parcialmente a nivel arquitectónico por 34 escenarios UCM.
 Si bien es importante tener en cuenta la cantidad de clases como medida
 de tamaño de un sistema, en nuestro caso es importante determinar cuáles
 de estas clases juegan un papel importante en la materialización de la
 arquitectura.
\end_layout

\begin_layout Standard
En la fase de recolección de información de los casos de estudio, los casos
 de uso que se selecionaron para generar el log de ejecución, se basaron
 en los escenarios UCM disponibles en la documentación arquitectúra de cada
 proyecto.
 De esta forma, es posible medir la eficacia del 
\emph on
DRArch
\emph default
 comparando los componentes descubriertos sobre los que debería haber decubierto.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
comentar la tabla! ver la siguiente nota como ejemplo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
En el caso de 
\emph on
G2
\emph default
, 
\emph on
ArchSync
\emph default
 determinó que el 
\emph on
source code 
\begin_inset Formula $\Delta$
\end_inset


\emph default
 de prueba estaba conformado por 20 clases modificadas.
 Sin embargo, solamente 2 de ellas tenían mapeos arquitectónicos.
 En otras palabras, 
\emph on
ArchSync
\emph default
 redujo el espacio de búsqueda en un 90%.
 Estas 2 clases representan el 2,04% del total de clases con importancia
 arquitectónica, y los dos paths detectados por 
\emph on
ArchSync
\emph default
 como potencialmente modificados representan el 5,88% de todos los paths
 de la especificación UCM.
 Esto significó un ahorro significativo en el esfuerzo del arquitecto, ya
 que evitó revisar un 97,96% de las clases relevantes y un 94,12% de los
 paths.
\end_layout

\begin_layout Standard
Por otro lado, en el caso del proyecto 
\emph on
FLABot,
\emph default
 el 
\emph on
source code 
\begin_inset Formula $\Delta$
\end_inset


\emph default
 del caso de estudio estaba constituido por un total de 91 clases modificadas,
 de las cuales solo 15 afectaban algún flujo de control en la especificación
 UCM.
 Al detectar esto, 
\emph on
ArchSync
\emph default
 redujo el espacio de búsqueda en un 83,52%.
 Esas 15 clases representan el 5,56% del total de clases relevantes arquitectóni
camente, y 
\emph on
ArchSync
\emph default
 detectó que 11,48% de los paths (14 de 122) habían sido cambiados.
 Esto evitó revisar un 94,44% de las clases relevantes y un 88,52% de los
 paths.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Market.bubble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Market
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
G2.bubble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
G2
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# componentes arquitectónicos que se deben reconstruir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# componentes arquitectónicos reconstruidos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# relaciones arquitectónicos que se deben reconstruir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# relaciones arquitectónicos reconstruidos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# responsabilidades arquitectónicos que se deben reconstruir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# responsabilidades arquitectónicos reconstruidos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Eficacia
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Eficacia-del-DRArch-parcial"

\end_inset

Eficacia por artefactos arquitectónicos del 
\emph on
DRArch
\emph default
 en los proyectos Market y en G2.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
comentar los graficos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/CasosDeEstudioEficacia.PNG
	width 40theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Eficacia-entre-los-artefactos"

\end_inset

Eficacia entre los distintos artefatos arquitectónicos para los proyectos
 Market y G2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/CasosDeEstudioEficaciaMejorada.PNG
	width 40theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Mejora-de-la-Eficacia"

\end_inset

Mejora de la Eficacia luego de la incorporación de nuevas reglas.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Un resumen de estos índices puede verse en el Cuadro\InsetSpace ~

\begin_inset LatexCommand ref
reference "tab:Eficacia-del-DRArch"

\end_inset

.
 
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features>
<column alignment="left" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Market
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
G2
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# total de clases
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
~40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
~900
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# clases con mapeo arquitectónico
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
98
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# artefactos arquitectónicos que se debe reconstruir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
# artefactos arquitectónicos reconstruidos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
% clases con mapeo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
100%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2,04%
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
% artefactos arquitectónicos que se debe reconstruir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
%
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
% artefactos arquitectónicos reconstruidos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
%
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
% eficiencia
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
%
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Eficacia-del-DRArch"

\end_inset

Eficacia total del 
\emph on
DRArch
\emph default
 en los proyectos Market y en G2.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
hacerlo para un aspecto y despues armar una tabla con los resultados de
 descubrimeinto del resto
\end_layout

\begin_layout Standard
diciendo que componentes encontro sobre que componentes debió encontrar
\end_layout

\begin_layout Standard
y mostrando tambien cuales reglas se tuvieron que agregar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
y despues ver el G2 para ver si se mejoró la eficacia
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:Conclusiones-y-Trabajos"

\end_inset

Conclusiones y trabajos futuros
\end_layout

\begin_layout Standard
En los capítulos previos de este trabajo se presentó 
\emph on
DRArch
\emph default
, un enfoque para la reconstrucción de arquitecturas que define un proceso
 interactivo, iterativo e incremental.
 Mediante el uso de información estática (codigo fuente), dinámica (logs
 de ejecución), experiencia de los distintos 
\emph on
stakeholders
\emph default
, etc., 
\emph on
DRArch
\emph default
 permite reconstruir la arquitectura de un sistema por medio de un proceso
 en el cual el arquitecto acepta o rechaza sugerencias para generar diagramas
 de UCMs.
\end_layout

\begin_layout Standard
El prototipo de 
\emph on
DRArch
\emph default
 fue implementado como plug-in de 
\emph on
Eclipse
\emph default
, aprovechando su arquitectura extensible, su modelo para análisis estático
 de código fuente Java y su framework de interfaz de usuario.
 A su vez, ésto permitió aprovechar los editores de UCM y el módulo de instrumen
tación de código de 
\emph on
FLABot
\emph default
 asi como tambíen la utilización del plug-in 
\emph on
JQuery
\emph default
, que es quien utiliza las ventajas de 
\emph on
Eclipse
\emph default
 sobre el metamodelo del lenguaje Java para realiza la transformación del
 código fuente a una representación de hechos al estilo 
\emph on
ProLog
\emph default
.
 
\end_layout

\begin_layout Standard
Como aporte principal, 
\emph on
DRArch
\emph default
 permite ....Al mismo tiempo, el enfoque revela...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
Como aporte principal, 
\emph on
DRArch
\emph default
 permite actualizar los UCMs arquitectónicos con respecto a su implementación.
 Al mismo tiempo, el enfoque revela violaciones a las reglas de comportamiento
 impuestas por el estilo arquitectónico a un nivel de abstracción apropiado
 para hacerlas evidentes.
 Por lo tanto, el análisis realizado por la herramienta también puede ser
 usado por el arquitecto para decidir la recodificación de algunas partes
 de la implementación de acuerdo con las prescripciones arquitectónicas.
\end_layout

\begin_layout Standard
Por otro lado, el enfoque se basa en ciertas suposiciones y tiene algunas
 limitaciones.
 Primero, cuando ocurre un cambio en el código fuente, suponemos que es
 posible conocer los mapeos previos entre UCMs e implementación.
 Esto significa que la implementación anterior a los cambios era consistente
 con los escenarios descriptos en los UCMs.
 Estos mapeos deberían ser especificados cuando el arquitecto crea los UCMs
 por primera vez y luego procede a implementarlos.
 En segundo lugar, el enfoque asume que las sincronizaciones entre UCMs
 e implementación se realizan con una frecuencia acorde al ritmo de desarrollo
 del sistema, para asegurar que los cambios entre las diferentes versiones
 del código fuente presenten pocas variaciones.
 Si esto no es así, el reconocimiento de las activaciones de responsabilidades
 basado en los eventos de los logs de ejecución se puede volver computacionalmen
te inmanejable.
\end_layout

\begin_layout Standard
La desventaja principal del enfoque radica en la distancia entre un UCM
 dado y las muchas implementaciones posibles para los paths de responsabilidades.
 La herramienta trata de reconstruir los paths de responsabilidades usando
 un análisis bidireccional, que combina ingeniería reversa de los logs de
 ejecución con información semántica proveniente de los UCMs desactualizados.
 Sin embargo, este procesamiento está lejos de ser automático, porque requiere
 una cantidad considerable de conocimiento semántico que debe ser proporcionado
 por el arquitecto.
 El arquitecto interactúa con la herramienta en dos puntos: para proveer
 los logs de ejecución correctos y para seleccionar entre las opciones de
 conciliación.
 Además, si bien la herramienta proporciona indicios de la aparición de
 nuevas responsabilidades, tanto éstas como sus correspondientes mapeos
 deben ser especificados de manera manual.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Limitaciones Actuales
\end_layout

\begin_layout Standard
El enfoque se basa en ciertas suposiciones y tiene algunas limitaciones...
\end_layout

\begin_layout Standard
La desventaja principal del enfoque...
\end_layout

\begin_layout Standard
La notación UCM da una noción de la estructura del sistema mediante componentes
 y responsabilidades, que es reforzada mediante los mapeos componente-clase
 y responsabilidad-método.
 Sin embargo, esta información no puede considerarse una documentación completa
 de la estructura de un sistema a nivel arquitectónico, ya que no define
 de manera explícita las relaciones entre estos elementos (por ejemplo,
 la estructura de herencia en una vista estática o los puertos y conectores
 en tiempo de ejecución).
 Otra debilidad que detectamos en nuestro enfoque es que su análisis es
 puramente sintáctico: no considera la semántica de las prescripciones ni
 los estilos arquitectónicos.
\end_layout

\begin_layout Standard
Finalmente, es necesario mencionar algunas desventajas inherentes a las
 técnicas de instrumentación de código y análisis de logs de ejecución,
 que fueron acarreadas por este trabajo.
 El módulo de instrumentación de 
\emph on
FLABot
\emph default
 se encuentra estable y ha sido utilizado exitosamente en un gran número
 de aplicaciones.
 Sin embargo, la elección de los puntos a inspeccionar para generar un log
 de ejecución implica un 
\emph on
tradeoff
\emph default
 importante.
 En teoría, sería posible registrar la ejecución de cada línea de código
 y el estado de todos los objetos en cada instante.
 De esta manera, se podría rea\SpecialChar \-
li\SpecialChar \-
zar un análisis más preciso y exhaustivo,
 ya que se contaría con absolutamente toda la información posible acerca
 de la ejecución de la aplicación.
 Sin embargo, la cantidad de información almacenada se volvería inmanejable
 y la aplicación analizada se vería extremadamente afectada en su rendimiento,
 ya que por cada línea ejecutada se activaría el mecanismo de publicación
 y subscripción de eventos del instrumentador.
\end_layout

\begin_layout Section
Trabajos futuros
\end_layout

\begin_layout Standard
La elaboración de este trabajo, junto con la implementación del prototipo,
 puso en evidencia nuevas posibilidades para investigaciones futuras, como
 así también algunas posibles mejoras a la implementación existente.
 En esta sección se describen algunas de ellas.
\end_layout

\begin_layout Subsection
Detección de Aspectos
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
agregar info con Pau
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\begin_inset LatexCommand cite
key "BCHRT05"

\end_inset


\end_layout

\begin_layout Subsection
Validación de patrones de diseño
\end_layout

\begin_layout Standard
Es muy común que los sistemas se desarrollen utilizando patrontes de diseño
 ya que representan soluciones a problemas genéricos 
\begin_inset LatexCommand cite
key "Gamma94"

\end_inset

.
 Muchas veces es necesario asegurarse de que los patrones estén implementados
 correctamente, ya que las modificaciones en el código fuente durante el
 desarrollo del sistema pueden afectar los patrones existentes.
 Se pude utitilizar una parte de la funcionalidad del 
\emph on
DRArch
\emph default
 para generar reglas que validen si los patrones de diseño están implementados
 correctamente.
 El diseño flexible de la herramiente permite realizar esta modificación
 realizando cambios menores en el código fuente.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
agragar algo mas de info
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Especialización del enfoque
\end_layout

\begin_layout Standard
Durante la elaboración de este trabajo, se trató de mantener la generalidad
 del enfoque al no limitarlo a ningún estilo arquitectónico en particular
 o a algún conjunto de convenciones de implementación específico.
 Como objetivo de diseño, ésto tuvo un efecto positivo en el trabajo ya
 que permite el uso de la herramienta en cualquier sistema que haya sido
 implementado en Java.
\end_layout

\begin_layout Standard
Sin embargo, creemos que los estilos arquitectónicos y las convenciones
 de implementación pueden aportar información valiosa al enfoque.
 Mediante la especificación de reglas, se puede mejorar su precisión incorporand
o un catálogo de de reglas orientadas a los ditintos estilos arquitectónicos
 así como también, reglas que cumplan con las convenciones de implementación.
 Si mediante un conjunto de reglas se detecta cuál es el estilo arquitectónico
 que predomina en el sistema, entonces es posible aplicar un segundo conjunto
 de reglas que sean específicas para el estilo arquitectónico predominante,
 y así mejorar la eficacia del 
\emph on
DRArch
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Subsection
Integración con aspectos estructurales
\end_layout

\begin_layout Standard
Si bien 
\emph on
ArchSync
\emph default
 produjo buenos resultados en la sincronización de UCMs con implementación,
 está claro que hay muchas partes de la documentación de una arquitectura
 para las que esta notación no es apropiada.
 Para abarcar una mayor proporción de la documentación, es necesario tener
 en cuenta los aspectos estructurales de la arquitectura, generalmente especific
ados mediante diagramas de 
\emph on
descomposición de módulos
\emph default
 para una vista estática, de 
\emph on
componentes y conectores
\emph default
 para vistas que representan la estructura en tiempo de ejecución y de 
\emph on
deployment
\emph default
 para mostrar cómo se relaciona el sistema con los elementos de su ambiente
 que no son software.
\end_layout

\begin_layout Standard
Creemos que la integración de algunos de los enfoques estructurales basados
 en ingeniería reversa, presentados en la Sección\InsetSpace ~

\begin_inset LatexCommand ref
reference "sub:Estrategias-ingenieria-reversa"

\end_inset

, con el concepto de sincronización incremental presentado en este trabajo
 puede ser beneficiosa por varias razones.
 Principalmente, mejoraría el desempeño de 
\emph on
ArchSync
\emph default
 al permitir una sincronización más completa de la documentación de diseño.
 Además, al aprovechar la documentación existente que no ha sido afectada
 por los cambios en el código, se reduce la cantidad de información semántica
 que se requiere y, por lo tanto, la necesidad de intervención del arquitecto
 en el proceso.
\end_layout

\begin_layout Subsection
Trazabilidad en métodos de diseño
\end_layout

\begin_layout Standard
Los artefactos producidos durante el desarrollo de software --tales como
 descripciones de modelos, diagramas, especificaciones formales abstractas
 y código fuente-- están altamente interrelacionados, ya que los cambios
 en algunos de ellos afectan a otros.
 La falta de información acerca de estas relaciones o la incerteza acerca
 de la información existente limita la utilidad de los modelos de software
 durante el de\SpecialChar \-
sa\SpecialChar \-
rro\SpecialChar \-
llo.
\end_layout

\begin_layout Standard

\emph on
ArchSync
\emph default
 ataca el problema particular de sincronización de relaciones entre código
 fuente y UCMs.
 Sin embargo, la perspectiva práctica tomada en el desarrollo de este trabajo
 nos hace creer posible su extensión para soportar la sincronización de
 otro tipo de relaciones entre elementos de los modelos.
\end_layout

\begin_layout Subsection
Mapeo de paths con casos de test
\end_layout

\begin_layout Standard
Una vez que la aplicación que está siendo analizada se ha puesto en ejecución,
 el proceso de ejercitarla con los casos de uso correspondientes a los paths
 de\SpecialChar \-
sac\SpecialChar \-
tua\SpecialChar \-
li\SpecialChar \-
za\SpecialChar \-
dos se debe realizar de manera manual.
 En caso de tener que verificar un número considerable de paths, la tarea
 se puede volver muy tediosa, aumentando la probabilidad de introducir errores
 en el análisis por distracciones del usuario.
\end_layout

\begin_layout Standard
Un posible trabajo futuro para mitigar esta debilidad del enfoque puede
 ser permitir el mapeo de UCMs con casos de test.
 Al contar la herramienta con información acerca de qué caso de test corresponde
 a cada path, sería posible la creación de los logs de ejecución necesarios
 sin intervención del usuario.
 Además, esto puede permitir un análisis de cobertura de los casos de test:
 si se detecta que un log de ejecución no cubre cierta porción de código
 que ha sido modificada, se puede advertir al usuario que es necesaria la
 creación de un nuevo caso o la modificación del existente.
\end_layout

\begin_layout Subsection
Especialización del enfoque
\end_layout

\begin_layout Standard
Durante la elaboración de este trabajo, se trató de mantener la generalidad
 del enfoque al no limitarlo a ningún estilo arquitectónico en particular
 o a algún conjunto de convenciones de implementación específico.
 Como objetivo de diseño, ésto tuvo un efecto positivo en el trabajo ya
 que permite el uso de la herramienta en cualquier sistema que haya sido
 implementado en Java.
\end_layout

\begin_layout Standard
Sin embargo, creemos que los estilos arquitectónicos y las convenciones
 de implementación pueden aportar información valiosa al enfoque.
 Mediante la especialización de las reglas de análisis de 
\emph on
Path-Log Matcher
\emph default
 para algún estilo particular, se puede mejorar su precisión al eliminar
 algunas alternativas de conciliación que de antemano se sabe que no son
 válidas.
 Asimismo, se podrían introducir nuevas reglas en el componente 
\emph on
Diff Mapper
\emph default
 que, al aportar información acerca de las convenciones de implementación,
 permitan una mayor precisión en la detección de nuevas responsabilidades.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\start_of_appendix
\begin_inset LatexCommand label
name "cha:Eclipse-FLABot-y-JQuery"

\end_inset

Eclipse, FLABot y JQuery
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Plataforma-Eclipse"

\end_inset

Plataforma Eclipse
\end_layout

\begin_layout Standard
Eclipse es una comunidad open-source cuyos proyectos están orientados a
 proveer una plataforma de desarrollo extensible y frameworks de aplicaciones
 para construir software.
 Eclipse provee herramientas y frameworks extensibles que abarcan el ciclo
 de vida de desarrollo de software, incluyendo soporte para modelado, entornos
 de desarrollo para Java, C/C++ y otros lenguajes, testing y performance,
 business intelligence, aplicaciones de escritorio y desarrollo embebido.
 Un gran ecosistema de importantes empresas de software, universidades,
 institutos de investigación e individuos extienden, complementan y soportan
 la plataforma Eclipse 
\begin_inset LatexCommand cite
key "ECLIPSE"

\end_inset

.
\end_layout

\begin_layout Standard
Uno de los beneficios claves de la plataforma Eclipse aparece a través de
 su uso como un punto de integración.
 Al construir las herramientas o aplicaciones sobre la plataforma Eclipse,
 se les permite integrarse con otras herramientas también escritas usando
 la plataforma.
 De esta manera, la plataforma integra las herramientas individuales en
 un único producto, proveyendo una experiencia rica y consistente para los
 usuarios.
\end_layout

\begin_layout Standard
El rol principal de la plataforma es brindar a los desarrolladores un conjunto
 de mecanismos y reglas para conducir a la integración simple y sistemática
 de herramientas.
 Éstos mecanismos son expuestos por medio de APIs (Application Programming
 Intefaces), clases y métodos bien definidos.
 La plataforma además provee bloques de construcción y frameworks muy útiles
 para facilitar el desarrollo de nuevas he\SpecialChar \-
rra\SpecialChar \-
mien\SpecialChar \-
tas.
\end_layout

\begin_layout Standard
En la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Arquitectura-de-Plug-ins"

\end_inset

 se muestra un esquema de los componentes principales de la arquitectura
 de plug-ins de Eclipse.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/eclipsePluginArch.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Arquitectura-de-Plug-ins"

\end_inset

Arquitectura de Plug-ins de Eclipse
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Arquitectura de Plug-ins
\end_layout

\begin_layout Standard
Un 
\emph on
plug-in
\emph default
 es la menor unidad de función de la plataforma Eclipse que puede ser desarrolla
da y entregada por separado.
 Por lo general, una herramienta pequeña se escribe como un solo plug-in,
 mientras que una herramienta compleja tiene su funcionalidad repartida
 entre varios plug-ins.
 Excepto por un pequeño kernel llamado 
\emph on
Platform Runtime
\emph default
, toda la funcionalidad de la plataforma es provista en forma de plug-ins.
\end_layout

\begin_layout Standard
La configuración de cada plug-in se describe a través de un par de archivos.
 El manifiesto declara información esencial acerca del plug-in, incluyendo
 nombre, versión y dependencias hacia otros plug-ins.
 El segundo archivo, plugin.xml, declara las interconexiones del plug-in
 con otros plug-ins.
 El modelo de interconexión es simple: un plug-in declara cualquier número
 de puntos de extensión, y cualquier número de extensiones a uno o más puntos
 de extensión en otros plug-ins.
 Los puntos de extensión pueden ser extendidos por otros plug-ins.
\end_layout

\begin_layout Standard
Un punto de extensión puede tener una interfaz API correspondiente.
 Otros plug-ins contribuyen implementaciones de esta interfaz por medio
 de extensiones de este punto de extensión.
 Cualquier plug-in es libre de definir nuevos puntos de extensión y de proveer
 una nueva API para que usen otros plug-ins.
 En la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Comunicación-entre-Plug-ins"

\end_inset

 se ilustran los roles principales para la comunicación entre plug-ins.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/EclipsePluginComunicacion.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Comunicación-entre-Plug-ins"

\end_inset

Comunicación entre Plug-ins de Eclipse
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al iniciar, la plataforma descubre el conjunto de plug-ins disponibles,
 lee sus archivos de manifiesto, y construye un registro de plug-ins en
 memoria.
 Al determinar el conjunto de plug-ins al principio, y al soportar un significat
ivo intercambio de información entre plug-ins sin tener que activar ninguno
 de ellos, la plataforma puede proveer a cada plug-in de una rica fuente
 de información pertinente acerca del contexto en el que está corriendo.
 
\end_layout

\begin_layout Standard
La plataforma corre en una única invocación de una máquina virtual Java
 estándar.
 A cada plug-in se le es asignado su propio class loader Java, que es responsabl
e de cargar sus clases y recursos.
 Cada plug-in declara explícitamente su dependencia con otros plug-ins de
 los que espera acceder directamente a sus clases, y controla la visibilidad
 frente a los plug-ins dependientes de las clases e interfaces públicas
 en sus librerías.
 Ésta información se declara en el manifiesto, y las reglas de acceso son
 aplicadas en tiempo de ejecución por los class loaders de los plug-ins.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:FLABot"

\end_inset

FLABot
\end_layout

\begin_layout Standard

\emph on
FLABot
\begin_inset Foot
status collapsed

\begin_layout Standard
\begin_inset LatexCommand htmlurl
name "FLABot homepage:"
target "http://www.exa.unicen.edu.ar/isistan/flabot/"

\end_inset


\end_layout

\end_inset


\emph default
 es una herramienta de soporte para la localización de fallas y debugging
 de plug-ins de Eclipse.
 El tipo de soporte que provee la herramienta no se trata de encontrar puntos
 de error específicos en el código, sino que se enfoca en el modelo arquitectóni
co de un plug-in y usa esa información para aproximar las regiones de código
 donde los errores se originan con mayor probabilidad.
 El proyecto fue inspirado por el enfoque propuesto en 
\begin_inset LatexCommand cite
key "SORIA04"

\end_inset

.
 Básicamente, éste enfoque se basa en la noción de que usar modelos arquitectóni
cos permite al desarrollador razonar y resolver muchos problemas de debugging
 en un nivel que es razonablemente manejable, inclusive para sistemas complejos
 
\begin_inset LatexCommand cite
key "SAIP"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/flabotFlow.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Esquema-de-funcionamiento-FLABot"

\end_inset

Esquema de funcionamiento de 
\emph on
FLABot
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la Figura\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Esquema-de-funcionamiento-FLABot"

\end_inset

 se presenta un esquema del funcionamiento de 
\emph on
FLABot
\emph default
.
 Para alcanzar la funcionalidad propuesta, la herramienta utiliza información
 de mapeo responsabilidad-código para configurar un instrumentador de bytecode
 Java, de esta manera generando registros de las trazas de ejecución problemátic
as.
 Éstos registros o logs son tomados por el 
\emph on
Asistente de Localización de Fallas
\emph default
 para realizar un análisis exploratorio de los paths de funcionalidad descriptos
 en la especificación arquitectónica.
 Éste análisis combina información de ejecución de bajo nivel contenida
 en los logs con feedback del usuario, para así identificar la causa de
 la falla en un conjunto de responsabilidades.
 Una vez detectadas las causas del error, el conjunto de responsabilidades
 problemáticas es traducido en un conjunto de breakpoints en sus correspondiente
s regiones de código, una vez más utilizando la información de mapeo responsabil
idad-código.
 Finalmente, el usuario es libre de utilizar técnicas de debugging tradicionales
 sobre este espacio de búsqueda reducido.
\end_layout

\begin_layout Standard
La funcionalidad principal de 
\emph on
FLABot
\emph default
 se encuentra organizada básicamente en tres módulos:
\end_layout

\begin_layout Description
Editores\InsetSpace ~
de\InsetSpace ~
Especificaciones\InsetSpace ~
Arquitectónicas: Este módulo posee la fun\SpecialChar \-
cio\SpecialChar \-
na\SpecialChar \-
li\SpecialChar \-
dad
 necesaria para la especificación y manipulación de modelos de componentes
 UML y de UCMs de manera gráfica, como se muestra en las Figuras\InsetSpace ~

\begin_inset LatexCommand ref
reference "fig:Editor-de-componentes"

\end_inset

 y 
\begin_inset LatexCommand ref
reference "fig:Editor-de-UCM"

\end_inset

.
 Los editores permiten mapear cada componente UML a un conjunto de clases
 Java, para luego mapear cada responsabilidad a un subconjunto de los métodos
 de estas clases.
 Estos modelos son los vehículos principales para construir la información
 arquitectónica que los otros dos módulos necesitan para funcionar.
 Ambos editores fueron implementados como plug-ins de Eclipse, por lo que
 se integran completamente con la plataforma y tanto los editores mismos
 como sus correspondientes modelos pueden ser reutilizados por cualquier
 otro plug-in.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/screenshot-componentEditor.png
	lyxscale 50
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Editor-de-componentes"

\end_inset

Editor de componentes UML de 
\emph on
FLABot
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/screenshot-ucmEditor.png
	lyxscale 50
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Editor-de-UCM"

\end_inset

Editor de UCM de 
\emph on
FLABot
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Asistente\InsetSpace ~
para\InsetSpace ~
Localización\InsetSpace ~
de\InsetSpace ~
Fallas: Este módulo materializa las estrategias
 para localización de fallas guiada por la arquitectura, de acuerdo al enfoque
 descripto en 
\begin_inset LatexCommand cite
key "SORIA04"

\end_inset

.
\end_layout

\begin_layout Description
Debugger\InsetSpace ~
Especializado: Este módulo añada el soporte para debugging en sí.
 El debugger especializado permite relacionar la salida del asistente con
 estructuras de código, insertando breakpoints en las que resulten apropiadas,
 para luego permitir al desarrollador aplicar técnicas tradicionales de
 debugging sobre el código de la aplicación.
\end_layout

\begin_layout Standard
Además de estos tres módulos principales, para generar los logs de ejecución
 
\emph on
FLABot
\emph default
 implementa un módulo de instrumentación de código estructurado en forma
 de capas.
 La capa superior recibe parámetros de configuración que indican el conjunto
 de clases y métodos que deben ser inspeccionados, es encargada de iniciar
 la ejecución de la aplicación instrumentada y produce como respuesta un
 log con las trazas de ejecución.
 En las capas inferiores se implementa la infraestructura de bajo nivel
 para la instrumentación en sí, que hace uso de un 
\emph on
class loader
\emph default
 especializado para analizar y modificar el 
\emph on
bytecode
\emph default
 de las clases en los puntos que deben ser inspeccionados.
 Cuando una clase está a punto de ser cargada dentro de la máquina virtual,
 el bytecode se analiza para detectar si en ella se produce alguno de los
 eventos indicados en los parámetros de configuración.
 Si esto es así, se utiliza la librería 
\emph on
Javassist
\emph default
 
\begin_inset LatexCommand cite
key "chiba98javassist"

\end_inset

 para insertar llamadas en los puntos inspeccionados a un mecanismo de publicaci
ón y subscripción de eventos que se encarga de generar el log.
\end_layout

\begin_layout Standard
Independientemente de sus detalles de implementación, para reutilizar el
 instrumentador de FLABot solamente hace falta comunicarse con la capa superior.
 Ésto se hace a través de un punto de extensión, definido en el instrumentador,
 al que es posible contribuir los parámetros de configuración necesarios
 para indicar tanto las clases y métodos a inspeccionar como la ubicación
 donde se debe guardar el log de ejecución.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:JQuery"

\end_inset

JQuery
\end_layout

\begin_layout Standard
JQuery es un buscador flexible de código fuente basado en consultas y desarrolla
do como un plug-in de Eclipse.
 Esta implementado sobre un lenguaje lógico de consultas.
 El mismo soporta búsquedas directas de subconjuntos de elementos especícos
 de código fuente de acuerdo a algún criterio especicado por una consulta.
 JQuery esta construido sobre las bases de un lenguaje similar a prolog:
 TyRuBa.
 El poder de un lenguaje de programación lógico provee la flexibilidad para
 expresar consultas complejas y usar reglas para denir relaciones de alto
 nivel.
 El lenguaje de consultas de JQuery es básicamente TyRuBa, complementado
 con una librería de predicados que permite consultar sobre unidades de
 código y las relaciones entre ellas.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="middle" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Nombre del Predicado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Tipo de argumento
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Descripción
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
cu
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CU
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
cu(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es una unidad de compilación (archivo .class o .java).
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
package
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Package
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
package(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un paquete.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RefType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
class(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es una clase.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RefType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
interface(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es una interface.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
method(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un método.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
constructor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Constructor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
constructor(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un constructor.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
initializer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initializer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
initializer(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un inicializador.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
field(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un campo.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bookmark
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Bookmark
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bookmark(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un 
\emph on
bookmark.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
warning
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Warning
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
warning(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un 
\emph on
warning
\emph default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
error(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es un error.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
task(?X)
\family default
 significa: 
\family typewriter
\noun on
?X
\family default
\noun default
 es una tarea.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Predicados-unarios"

\end_inset

Predicados unarios
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Nombre del Predicado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Tipo de argumento
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Descripción
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
priority
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Task, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
priority(?T, ?P)
\family default
\size default
 significa: La tarea
\family typewriter
\size small
\noun on
 ?T
\family default
\size default
\noun default
 tiene prioridad 
\family typewriter
\size small
\noun on
?P
\family default
\size default
\noun default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Element, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
name(?E, ?S)
\family default
\size default
 significa: El elemento
\family typewriter
\size small
\noun on
 ?E
\family default
\size default
\noun default
 tiene el nombre 
\family typewriter
\size small
?S
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
child
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Element, Element
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
child(?Sup, ?Sub)
\family default
\size default
 significa: El elemento
\family typewriter
\size small
\noun on
 ?Sup
\family default
\size default
\noun default
 tiene el hijo 
\family typewriter
\size small
?Sub
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
extends
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RefType, RefType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
extends(?C1, ?C2)
\family default
\size default
 significa: La clase (o interface)
\family typewriter
\size small
\noun on
 ?C1
\family default
\size default
\noun default
 extiende la clase (o interface) 
\family typewriter
\size small
?C2
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
implements
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RefType, RefType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
implements(?C, ?I)
\family default
\size default
 significa: La clase 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 implementa la interface 
\family typewriter
\size small
?I
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
throws
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Callable, RefType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
throws(?C, ?T)
\family default
\size default
 significa: El llamador 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 lanza 
\family typewriter
\size small
?T
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Field, Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
type(?F, ?T)
\family default
\size default
 significa: El campo 
\family typewriter
\size small
\noun on
?F
\family default
\size default
\noun default
 es del tipo 
\family typewriter
\size small
?T
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
modifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Element, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
modifier(?E, ?S)
\family default
\size default
 significa: El elemento
\family typewriter
\size small
\noun on
 ?E
\family default
\size default
\noun default
 tiene un modificador (ej.: public, private, static, etc.) 
\family typewriter
\size small
?S
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
arg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Callable, Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
arg(?C, ?T)
\family default
\size default
 significa: El llamador 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 tiene un argumento dle tipo 
\family typewriter
\size small
?T
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
returns
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Callable, Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
returns(?C, ?T)
\family default
\size default
 significa: El llamador 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 retorna el tipo 
\family typewriter
\size small
?T
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
signature
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Callable, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
signature(?C, ?S)
\family default
\size default
 significa: El llamador
\family typewriter
\size small
\noun on
 ?C
\family default
\size default
\noun default
 tiene una signatura 
\family typewriter
\size small
?S
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Predicados-binarios"

\end_inset

Predicados binarios
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Nombre del Predicado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Tipo de argumento
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\align center

\series bold
Descripción
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
methodCall
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Block, Method, SourceLocation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
methodCall(?B, ?M, ?L)
\family default
\size default
 significa: El bloque 
\family typewriter
\size small
?B
\family default
\size default
 llama al método 
\family typewriter
\size small
?M
\family default
\size default
 en la ubicación 
\family typewriter
\size small
?L
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
thisCall
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Constructor, Constructor, SourceLocation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
thisCall(?C1, ?C2, ?L)
\family default
\size default
 significa: El constructor 
\family typewriter
\size small
?C1
\family default
\size default
, realiza un llamado this al constructor 
\family typewriter
\size small
?C2
\family default
\size default
 en la ubicación 
\family typewriter
\size small
?L
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
construcorCall
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Block, Constructor, SourceLocation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
construcorCall(?B, ?C, ?L)
\family default
\size default
 significa: El bloque 
\family typewriter
\size small
?B
\family default
\size default
 llama al constructor 
\family typewriter
\size small
?C
\family default
\size default
 en la ubicación 
\family typewriter
\size small
?L
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
instanceOf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Block, RefType, SourceLocation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
instanceOf(?B, ?T, ?L)
\family default
\size default
 significa: El bloque 
\family typewriter
\size small
?B
\family default
\size default
 es una instancia del tipo 
\family typewriter
\size small
?T
\family default
\size default
 en la ubicación 
\family typewriter
\size small
?L
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
reads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Block, Field, SourceLocation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
reads(?B, ?F, ?L)
\family default
\size default
 significa: El bloque 
\family typewriter
\size small
?B
\family default
\size default
 lee el campo 
\family typewriter
\size small
?F
\family default
\size default
 en la ubicación 
\family typewriter
\size small
?L
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
writes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Block, Field, SourceLocation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
writes(?B, ?F, ?L)
\family default
\size default
 significa: El bloque 
\family typewriter
\size small
?B
\family default
\size default
 escribe el campo 
\family typewriter
\size small
?F
\family default
\size default
 en la ubicación 
\family typewriter
\size small
?L
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
param
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Callable, Type, Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
param(?C, ?T, ?N)
\family default
\size default
 significa: El llamador 
\family typewriter
\size small
?C
\family default
\size default
 tiene un argumento del tipo 
\family typewriter
\size small
?T
\family default
\size default
 como su argumento numero 
\family typewriter
\size small
?N
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
tag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Element, String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
tag(?E, ?N, ?V)
\family default
\size default
 significa: El elemento 
\family typewriter
\size small
?E
\family default
\size default
 tiene un javadoc tag 
\family typewriter
\size small
?N
\family default
\size default
 con el valor 
\family typewriter
\size small
?V
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Predicados-ternarios"

\end_inset

Predicados ternarios
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
agragar el fact snapshot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" width="1in">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Nombre del Predicado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Tipo de argumento
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Descripción
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
component
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
component(?C)
\family default
\size default
 significa: 
\family typewriter
\size small
\noun on
?T
\family default
\size default
\noun default
 es un componente.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
interfaceLink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
interfaceLink(?IM1, ?IM2)
\family default
\size default
 significa: 
\family typewriter
\size small
?IM1
\noun on
 
\family default
\size default
\noun default
esta vinculada con 
\family typewriter
\size small
?IM2.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
interfaceModel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
interfaceModel(?IM)
\family default
\size default
 significa: El elemento
\family typewriter
\size small
\noun on
 
\noun default
?IM
\family default
\size default
 es una interface.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
port(?P)
\family default
\size default
 significa: 
\family typewriter
\size small
\noun on
?P
\family default
\size default
\noun default
 es un puerto.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasPort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasPort(?C, ?P)
\family default
\size default
 significa: El componente 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 tiene un puerto 
\family typewriter
\size small
?P
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasProvided
\newline
Interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasProvidedInterface(?P, ?IP)
\family default
\size default
 significa: El purto 
\family typewriter
\size small
\noun on
?P
\family default
\size default
\noun default
 provee una interface 
\family typewriter
\size small
?IP
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasRequired
\newline
Interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasRequiredInterface(?P, ?IR)
\family default
\size default
 significa: El purto 
\family typewriter
\size small
\noun on
?P
\family default
\size default
\noun default
 requiere una interface 
\family typewriter
\size small
?IR
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
association
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
association(?C, ?P, ?C)
\family default
\size default
 significa: El componente 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 esta asociado a la clase 
\family typewriter
\size small
?C
\family default
\size default
 la cual esta en el paquete 
\family typewriter
\size small
?P
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
mapping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
mapping(?C, ?P, ?C)
\family default
\size default
 significa: El componente 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 esta mapeado a la clase 
\family typewriter
\size small
?C
\family default
\size default
 la cual esta en el paquete 
\family typewriter
\size small
?P
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
relationship
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
relationship(?C1, ?C2, ?P)
\family default
\size default
 significa: El componente 
\family typewriter
\size small
\noun on
?C1
\family default
\size default
\noun default
 esta relacionado con el componente 
\family typewriter
\size small
\noun on
?C2 
\family default
\size default
\noun default
con el prototipo 
\family typewriter
\size small
?P
\family default
\size default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
responsibility
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
responsibility(?R)
\family default
\size default
 significa: 
\family typewriter
\size small
\noun on
?R
\family default
\size default
\noun default
 es una responsabilidad.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
has
\newline
Responsibility
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
hasResponsibility(?C, ?R)
\family default
\size default
 significa: El componente 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
 tiene la responsabilidad 
\family typewriter
\size small
\noun on
?C
\family default
\size default
\noun default
.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
executedMothod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String, String, String, String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
executedMothod(?O, ?M, ?T, ?R) 
\family default
\size default
significa: 
\family typewriter
\size small
?O 
\family default
\size default
es el orden de ejecución, 
\family typewriter
\size small
?M
\family default
\size default
 es el método ejecutado, 
\family typewriter
\size small
?T 
\family default
\size default
es el tipo que retorna el método y 
\family typewriter
\size small
?R 
\family default
\size default
es el valor de lo que retornó la ejecución del método.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Predicados-DRArch"

\end_inset

Predicados 
\emph on
DRArch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand bibtex
options "plain"
bibfiles "bibliography"

\end_inset


\end_layout

\end_body
\end_document
